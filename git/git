git学习原因：
    github作为全球最大的代码托管平台，基于git
    git的功能强大，是优秀的版本控制工具
    一般公司内部都会使用基于git的代码托管平台
    职业发展过程中必备工具

版本控制：
    是指软件开发过程中各种程序代码，配置文件及说明文档等文件变更的管理。是软件配置管理的核心思想之一。
    分为：集中式管理控制分布式管理控制。 如svn和git
    集中式管理控制： 有一个单一的集中管理服务器，保存所有文件的修订版本
                    而协同工作的人们都通过客户端连接到这台服务器，获取最新的文件或者提交更新
    分布式版本控制：客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来
                   没有“中央服务器”，每个人的电脑都i是一个完整的版本库

git-svn区别：
    git是分布式的， svn是集中式的， 因为git是分布式的，所以git支持离线工作， 在本地进行很多操作， 而svn必须联网才能正常工作。
    git上手难，指令很多， 而svn就简单一些。对新手友好。
    git有本地分支， 分支只想某次提交， svn没有本地分支， 分支是拷贝的目录。 这个特性使得git分支操作更迅速， 成本低。

git核心概念就是工作流：
   工作区：电脑中的实际目录
   暂存区： 类似于缓存区，临时保存改动
   仓库区: 本地仓库和远程仓库

分支： 便于多人在同一个项目协作开发， 每个人开发不同的功能， 在各个分支互补影响， 
merge和rebase区别：
    rebase可以提供一套清晰的历史记录。
   merge只处理一次冲突，
     一如了一次合并的历史记录合并后的所有commit会按照时间从旧像新排列
     如果信息过度，可能会提高之后的查找问题的难度，因为在一个大型项目中，单纯依靠 git merge 方法进行合并，
     会保存所有的提交过程的信息：引出分支，合并分支，在分支上再引出新的分支等等，类似这样的操作一多，提交历史信息就会显得杂乱，
     这时如果有问题需要查找就会比较困难了。
    rebase： 改变了当前分支从master上拉出的位置。
              没有多余的历史记录， 且合并后的commit顺序不一定按照commit提交顺序排列
              看起来更加简洁
    当需要保留详细的合并信息的时候建议使用git merge，特别是需要将分支合并进入master分支时；当发现自己修改某个功能时，频繁进行了git commit提交时，
     发现其实过多的提交信息没有必要时，可以尝试git rebase。

fetch和pull区别：
   git fetch：相当于是从远程获取最新版本到本地，但不会自动 merge
   git pull：相当于是从远程获取最新版本并 merge 到本地
