面向对象编程：
    就是将你的需求抽象成一个对象， 然后将这个对象进行分析，为其添加对应的属性与方法，我们将这个对象成为类，

 0.JS是基于原型的面向对象语言，没有class（类）。产生对象的方式也与其他OO语言有所不同，采用原型的方式来构造对象。
 1封装：
   js时弱类型语言，没有像一些强类型语言有专门的方法可以实现封装， js只能模拟封装。
   js通过原型模拟封装，var Person = function ，创建一个类（实质上就是一个函数），可以在person的原型上添加方法，属性，这样基于可以将所需的
    方法属性，封装到person类中，使用的时候，使用new关键字，实例化对象使用。创建对象想使用类的方法，需要通过原型查找。
2.继承：
  js也没有传统意义上的继承， 只是模拟继承，es5之前通过 ，—proto，，call/apply， 组合式继承，寄生式继承等模拟继承，实质上还是通过原型查找父类的方法。

3.变量提升：var关键字声明变量和函数声明都可以变量提升。
4.js使用静态作用域， 函数定义时就确定了函数的作用域
5.js是动态态弱类型的语言
   弱类型，意味着你不需要告诉 JavaScript 引擎这个或那个变量是什么数据类型，JavaScript 引擎在运行代码的时候自己会计算出来。
  动态，意味着你可以使用同一个变量保存不同类型的数据



静态编译：
    静态编译是程序在编译时就确定好了所有类的关系， 要运行程序所有类缺一不可，在开始运行时， 或报错，程序终止

动态编译：
  在编译时并不确定所在类的关系， 在我们实例化类之前没有都装载在内存中， 在运行过程中动态决定加载类。若类丢失，产生
    异常，但是可以继续执行


js和java关系：
   java是一种真正面向对象的语言， js时脚本语言， 一种基于对象和驱动的语言
   js是直接嵌入到html文档中
   java声明变量不存在变量提升，而js用var声明的变量存在。
   java要执行先编译在用jvm解释执行， js直接在浏览器执行，是真正的动态解释语言
   java采用静态联编，js采用动态联编
      联编就是将模板或者函数合并在一起生成可执行代码的处理过程， 编译阶段进行的就是静态联编， 
      程序运行阶段进行的就是动态联编
   js是动态编译语言，java是静态编译语言  
        动态编译语言就是在执行期间才去发现数据类型的语言
        静态语言就是在编译时就要确定变量的数据类型
    js是弱类型语言
        弱类型，意味着你不需要告诉 JavaScript 引擎这个或那个变量是什么数据类型，JavaScript 引擎在运行代码的时候自己会计算出来。
           动态，意味着你可以使用同一个变量保存不同类型的数据
   