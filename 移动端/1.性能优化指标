1.瀑布图
   TTFB： 资源发出到响应回来时间

2.RAIL：
    响应： 处理事件应在50ms以内完成
    动画每10ms产生一帧（因为浏览器绘制也要花费时间）
    空闲： 尽可能增加空闲时间
    加载： 在5s内完成内容加载并可以交互。

    webPagetest


性能优化：
    1.优化dom：
        删除不必要的代码和注释， 尽量做到最小化文件
        压缩文件
        利用http缓存文件
        插入dom尽量使用documentframent创建文件
        减少重绘重排
        使用事件委托，避免大量的事件绑定

   2.优化css
        删除注释，压缩css文件，减小体积
        多个css合并， 缓存， 减少http请求
        尽量避免使用css表达式
        css代码尽量不要嵌套太深，充分利用css继承属性
        图片可以使用精灵图，
        css文件放在页面顶部， 
        使用link 不适用import
              link最大限度支持并行下载，@import过多嵌套导致串行下载
              浏览器对link支持早于@import，可以使用@import对老浏览器隐藏样式
        少使用table等
        使用css属性开启动画， 会开启硬件加速

   3.优化js
       预加载重要的js文件
       将文件放在页面底部

   减少http请求次数， 如css js尽量合并， 并压缩体积， 图片控制大小， 尽量使用精灵图， 使用缓存技术


   首屏优化：
       1.css js分割， 使首屏依赖的文件体检尽量最小， 
       2.非关键文件使用懒加载，避免组织首页渲染
       3.prefetch， preload，dns-prefetch等浏览器提供的资源提示， 加快文件传输。
       4.合理利用缓存，可以加快第二次渲染速度
       5.减少首屏需要的数据量， 较少http请求次数
       