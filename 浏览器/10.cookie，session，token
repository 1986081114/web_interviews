由于http是无状态的，为了使某个域名下的所有网页能够共享某些数据，session，cookie出现了。

cookie储存在用户本地终端上的数据，服务器生成，发送给浏览器，下次请求统一网站给服务器。
session会话，代表服务器与浏览器的一次会话过程，这个过程是连续的，也可以时断时续。
token令牌，是用户身份的验证方式。

session ：
 http是无状态的，服务器根据sessionid判断是否为一个用户。只要用户访问，就会更新最后访问时间， 维护session
就是会话，是服务器端的一种操作。当第一次访问一个服务器，服务器生成一个session，并且有一个sessionid与之对应，
这个session存储到内存，并且可以写入信息，sessionid被返回给客户端，客户端一般应cookie存储
  session的一个场景是购物车，添加了商品之后客户端就知道添加了哪些商品，但是服务器是如何判断的呢，所以也需要存储一些信息。
   就用到了session。

cookie  不可跨域
      存储在用户本地终端上的数据， 服务器生成，发送给浏览器，下一次请求发送。 cookie可以用来保存服务器发送来的一些数据，
        Set-Cookie 提供给服务器, 发送给用户, 用以设置cookie(服务器递过来一袋小饼干)
      例如sessionid，token。每一次请求，都会携带这些cookie，服务器端从请求头中渠道cookie信息，可以识别本次请求的来源，
      这样http就可以是由状态的，cookie只是实现session的其中一种方案。虽然是最常用的，但并不是唯一的方法。
      禁用cookie后还有其他方法存储，比如放在url中
      登录网站，今天输入用户名和密码登录之后，第二天再打开很多情况下就直接登录了，这个时候用到的一个机制就是cookie。
    cookie的构成：
     name，唯一的名称， 不区分大小写
    domain: cookie对于哪个域是有效的， 
    path： 表示这个cookie影响的路径
    expires：失效的事件，GMT时间格式， 如果不设置，浏览器关闭页面立即删除所有cookie，如果为负值，立即删除
    max-age：与expires作用相同，告诉浏览器多就过期，单位是秒， 而不是一个固定的时间， 优先级更高
    httponly：不能通过document.cookie修改这个值， 也不可见
    secure：安全只有在使用https才能使用这个cookie， http不可以。

    删除cookie，只需要创建一个同名的cookie，如果要删除某个Cookie，只需要新建一个同名的Cookie，并将maxAge设置为0，并添加到response中覆盖原来的Cookie。注意是0而不是负数。负数代表其他的意义。


session cookie区别：
  
   有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，。
    1.存储位置不同 ： cookie的数据信息存放在客户端上，session的数据心思存放在服务端上.
    2.存储容量不同： cookie保存的数据《=4kb， 一个站点最多保存20个cookie， 而对于session来讲并没有上限，
                    处于对服务器的性能考虑， session内不要存放太多的东西， 并且session有删除机制
    3.存储方式不同：cookie只保存ascll字符串， 并通过编码方式存储为unicode字符串或者二进制， session可以存储任何类型
    4.安全策略不同：cookie对客户端是可见的， 有心人可以分析存放在本地cookie并进行cookie欺诈吗不安全， session存放在服务器，对客户端
                   透明，安全
    5.有效期不同： 开发可以设置cookie属性，设置cookie有效期可以达到长期有效
                  Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效
                session依赖于依赖于cookie，session id存储在cookie， 也就是说cookie失效， session就失效， 
    6.跨域支持上不同： cookie支持跨域， 但是session不支持跨域访问
    7.服务器压力不同： cookie存储在客户端，不占用服务器资源， 而session存储在服务端， 每个用户产生一个session，会消耗服务器内存
               

token
  令牌，token是服务器在用户登录后返还给用户的 token是无状态的, 用以在一段时间内免于重复登录, 过了时间就失效
  一般存储在localStorage，cookie， sessionStorage ，服务器一般存储在数据库
   用户登录，成功后服务器返回Token给客户端。
   客户端收到数据后保存在客户端
   客户端再次访问服务器，将token放入headers中
   服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码

   验证：
        生成:
        加密函数A(数据A + 密钥A) => 签名A
        token = 数据A + 签名A
        验证:
        token => 数据A, 签名A
        加密函数A(数据A + 密钥B) => 签名B
        签名B == 签名A ? 验证成功 : 验证失败

        token无状态，可扩展 使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据
        支持移动设备
        跨域，
        安全 CSRF(跨站请求伪造)

token不是为了防止xss的二十放置csrf，csrf攻击的原因是浏览器会带上cookie，而不会带上token
因为传统的cookie保存的session id，服务器会根据这个session id，确保服务器与客户端对话；这是的cookie是有状态的
，意味着验证记录或者会话需要一直在服务端和客户端保持。
而token是无状态的，服务器不记录哪些用户登录了或者哪些 JWT 被发布了，只判断token是否有效，
token 是放在 jwt 里面下发给客户端的 而且不一定存储在哪里.

token加密：
  jwt举例：
   服务器生成一个随机数，和加密算法对账号密码机密，生成token。返回客户端
   前端每次 request 在 header 中带上 token  后端用同样的算法解密
   

前端开发中在网页刷新的时候所有的数据都会被清空， 这时候就要用到本地存储技术主要有cookie，localStorage，sessionStorage

document.cookie = '名字=值';
document.cookie = 'username=cfangxu;domain=baike.baidu.com'    //并且设置了生效域
得到数据var x = document.cookie;

localStorage和sessionStorage使用相同的api，尽在客户端浏览器存储
   localStorage.setItem("key","value");	//以“key”为名称存储一个值“value”

localStorage.getItem("key");	//获取名称为“key”的值

localStorage.removeItem("key");	//删除名称为“key”的信息。

localStorage.clear();	//清空localStorage中所有信息
只有相同域名的页面才能互相读取 localStorage，sessionStorage，同源策略与 cookie 一致
唯一的不同就是： localStorage理论上永久有效，除非用户清理
        
        
              sessionStorage仅在当前会话有效， 如果页面会话session结束（关闭窗口），就会消失
三者异同：
   1.生命周期
      cookie，可以设置失效时间，没有设置浏览器关闭就失效
      localStorage理论上永久有效，除非用户清理
      sessionStorage仅在当前会话有效， 如果页面会话session结束（关闭窗口），就会消失
   2.存储数据大小：
     cookie 4kb左右
     localStorage和sessionStorage可以保存5mb
  3.http请求：
     cookie每次都会被携带在http中， 如果使用cookie保存数据过多，会带来性能问题
     localStorage和sessionStorage进保存在客户端， 不参与服务器通信
   4.用途， cookie，服务器生成一般用来生成身份，其余两个存储数据的