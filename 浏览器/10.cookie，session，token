由于http是无状态的，为了使某个域名下的所有网页能够共享某些数据，session，cookie出现了。

cookie(小甜饼)：储存在用户本地终端上的数据，服务器生成，发送给浏览器，下次请求统一网站给服务器。
session会话，代表服务器与浏览器的一次会话过程，这个过程是连续的，也可以时断时续。
token令牌，是用户身份的验证方式。

session ：
 http是无状态的，服务器根据sessionid判断是否为一个用户。只要用户访问，就会更新最后访问时间， 维护session
就是会话，是服务器端的一种操作。当第一次访问一个服务器，服务器生成一个session，并且有一个sessionid与之对应，
这个session存储到内存，并且可以写入信息，sessionid被返回给客户端，客户端一般应cookie存储
  session的一个场景是购物车，添加了商品之后客户端就知道添加了哪些商品，但是服务器是如何判断的呢，所以也需要存储一些信息。
   就用到了session。

cookie  不可跨域
      存储在用户本地终端上的数据， 服务器生成，发送给浏览器，下一次请求发送。 cookie可以用来保存服务器发送来的一些数据，
        Set-Cookie 提供给服务器, 发送给用户, 用以设置cookie(服务器递过来一袋小饼干)
      例如sessionid，token。每一次请求，都会携带这些cookie，服务器端从请求头中渠道cookie信息，可以识别本次请求的来源，
      这样http就可以是由状态的，cookie只是实现session的其中一种方案。虽然是最常用的，但并不是唯一的方法。
      禁用cookie后还有其他方法存储，比如放在url中
      登录网站，今天输入用户名和密码登录之后，第二天再打开很多情况下就直接登录了，这个时候用到的一个机制就是cookie。
    cookie的构成：
     name，唯一的名称， 不区分大小写
    domain: cookie对于哪个域是有效的，二级域名 
    path： 表示这个cookie影响的路径
    expires：失效的事件，GMT时间格式， 如果不设置，浏览器关闭页面立即删除所有cookie，如果为负值，立即删除
    max-age：与expires作用相同，告诉浏览器多就过期，单位是秒， 而不是一个固定的时间， 优先级更高
    httponly：true， 不能通过document.cookie修改这个值， 也不可见
    secure：安全只有在使用https才能使用这个cookie， http不可以。

    删除cookie，只需要创建一个同名的cookie，如果要删除某个Cookie，只需要新建一个同名的Cookie，并将maxAge设置为0，并添加到response中覆盖原来的Cookie。注意是0而不是负数。负数代表其他的意义。
    cookie缺点：
        容量缺陷： cookie体积只有，4kb， 只能用来存储少量信息。 
        性能缺陷： cookie紧跟域名， 不管域名下面某一个地址需不需要cookie，请求都会携带完整的cookie，性能浪费。
        安全缺陷： 由于cookie以纯文本的方式在浏览器和服务器传递， 容易被非法捕获。 被篡改， 

session cookie区别：
  
   有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，。
    1.存储位置不同 ： cookie的数据信息存放在客户端上，session的数据心思存放在服务端上.
    2.存储容量不同： cookie保存的数据《=4kb， 一个站点最多保存20个cookie， 而对于session来讲并没有上限，
                    处于对服务器的性能考虑， session内不要存放太多的东西， 并且session有删除机制
    3.存储方式不同：cookie只保存ascll字符串， 并通过编码方式存储为unicode字符串或者二进制， session可以存储任何类型
    4.安全策略不同：cookie对客户端是可见的， 有心人可以分析存放在本地cookie并进行cookie欺诈吗不安全， session存放在服务器，对客户端
                   透明，安全，而且sessionid可以加密，
    5.有效期不同： 开发可以设置cookie属性，设置cookie有效期可以达到长期有效
                  Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效
                session依赖于依赖于cookie，session id存储在cookie， 也就是说cookie失效， session就失效， 
    6.跨域支持上不同： cookie支持跨域， 但是session不支持跨域访问
    7.服务器压力不同： cookie存储在客户端，不占用服务器资源， 而session存储在服务端， 每个用户产生一个session，会消耗服务器内存
               

token
  令牌，token是服务器在用户登录后返还给用户的 token是无状态的, 用以在一段时间内免于重复登录, 过了时间就失效
  一般存储在localStorage，cookie， sessionStorage ，服务器一般存储在数据库
  token组成：用户唯一身份标识uid，当前时间戳， sign签名等

  Token的定义：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，
  以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。
  这个令牌可以作为后续用户访问一些接口，的凭证
  因为传统的cookie保存的session id，服务器会根据这个session id，确保服务器与客户端对话；这是的cookie是有状态的
  ，意味着验证记录或者会话需要一直在服务端和客户端保持。
  而token是无状态的，服务器不记录哪些用户登录了或者哪些 JWT 被发布了，只判断token是否有效，
  token 是放在 jwt 里面下发给客户端的 而且不一定存储在哪里.

一般客户端发送用户名，密码，给服务端，服务端将登陆凭证做成数字签名 加密之后得到的字符串作为token

session和cookie区别：
   session是一种记录客户端和服务器会话状态的机制， 使服务器有状态， 可以记录会话信息
   token是令牌，访问资源接口所需要的凭证，token使得服务器无状态话，不会储存会话信息

为什么现在很少使用session，而使用token了？
    1.cookie会被附加在每个http请求中， 无形中添加了流量
    2.cookie明文传输， 所以存在安全问题
    3.cookie大小限制4kb，对于复杂请求来说是不够的
    4.对于浏览器以外的其他客户端（ios，android）必须手动设置cookie和sessession
    5.对于分布式系统和服务器集群中如何可以保证其它系统也可以正确解析session呢？
    


token加密：
  jwt实现token机制主要包含三部分：
     1.header：
        alg：采用的加密算法， 默认是HS256，采用的对称加密
        typ：类型， 固定值，通常是jwt
        通常会通过base65url算法进行编码
     2.payload
        携带的数据，比如可以将用户的id name放入到payload
        默认携带iat， 令牌签发时间
        可以设置过期时间
        会通过base64url算法进行编码
      3.signature
         设置一个secretkey，通常将前两个的结果合并后进行hs256算法
          但如果secretkey暴露非常危险，因为之后可以模拟颁发token，也可以解密token

      hs256加密算法的key被暴露是十分危险，比如在分布式系统， 每一个子系统都获取到key才能验证token，
      但是子系统既可以另外发布token，也可以验证token，有风险， 某些子系统只需要验证token就可以了

      这个时候就需要非对称加密RS256

 
   


