常见攻击策略：
   SQL 注入
   XSS 攻击
   CSFR 攻击

0、 SQL 攻击
   通常在url头或者表单内部通过拼接sql语言实现攻击(https:// baidu.com? select * from users where 1 = 1)
   它的原理比较简单，当浏览器url头或者表单提交数据到后端时，后端会进行数据库操作，如果未经过处理请求参数，
   那么攻击者会通过任意sql语句获取关键敏感数据从而实现攻击。

1.XSS攻击：
    xss攻击全称cross site scriptting（跨站脚本）
    xss攻击指在网站上注入恶意代码，通恶意脚本对客户端操作从而控制或者获取用户隐私的一种攻击方式
 
    这些操作可以做的事情：
       窃取cookie
       监听用户行为， 比如输入账号密码后直接发送给黑服务器
       修改dom伪造表单
       生成浮窗广告等

    三种实现： 存储型， 反射型， 基于dom型。
      存储型：(经过后端+经过数据库)
          顾名思义就是把恶意脚本存储起来。前端在表单上输入恶意xss脚本，后端存储到服务端的数据库， 当有浏览器请求数据时，脚本从服务器被传回来，
           常见的场景浏览评论提交一段脚本， 如果后端没有做好转义工作， 那评论内容存到数据库， 然后所有能看到这段评论的用户
           都会在浏览器中执行这段恶意代码。(比如 <script>alert(document.cookie)<script>)
      反射型：(经过后端 不经过数据库) 
            指的是恶意脚本作为网络请求的一部分。
           攻击者构造出一个特殊的url，包含恶意代码， 用户打开url时，
           服务器在拿到参数然后将恶意代码从url抽离返回给浏览器，浏览器会将内容作为html一部分解析，发现是一个脚本直接执行，就被攻击了。
           之所以是反射型是因为经过服务器，在反射到html文档中。而服务器并不会存储这些恶意脚本。
           比如qq标题经常是"什么，你竟然和同班xxx一起合过影"等刺激信息诱骗用户点击进而输入个人账号信息。然后攻击者后端会收到用户输入的账号和密码进而盗窃。
      基于dom型：文档型xss并不会经过服务器，恶意脚本修改页面的dom结构， 纯粹发生在客户端的攻击'
        //正确的链接
         <img src='http://www.baidu.com'/>
        //错误的链接
        <img src="http://error.com"/ onerror=()=>{alert(document.cookie())}>
    防范措施：
         攻击共同点都是让恶意脚本直接在浏览器执行， 为了避免攻击就要避免脚本代码的执行。要做到一个信念，两个利用

         一个信念：
            不要相信用户的输入， 无论是前端还是服务器，都要对用户的输入进行转码或者过滤
            如:
             <script>alert('你完蛋了')</script>
                转码后变为:
            &lt;script&gt;alert(&#39;你完蛋了&#39;)&lt;/script&gt;
        利用csp：
         csp就是浏览器中内置的安全策略，它的核心思想就是服务器决定浏览器加载那些资源， 
              限制其他域下的资源加载
              禁止向其他域提交数据
              提供上报机制，帮助发现xss攻击。
        利用httponly：
            设置cookie的httponly属性后， js无法获得cookie值，也能很好的预防xss攻击

2.CSRF攻击：
    CSRF，跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式，通常情况下，csrf攻击者借助于受害者的cookie片区服务器信任，
    可以在受害者毫不知情情况下以受害者名义伪造请求发送给服务器，从而在未授权情况下执行受保护的操作
    
    具体解释就是你在访问淘宝页面，此时一个yellow网站的弹窗突然出现，由于你经受不住好奇心，于是想一探究竟。然后你就进入这个yellow网站，
    由于你在淘宝页面有了登录状态，前端自动保存了cookie信息，当你在进入yellow网站时已经向它的后端发起了http请求，
    此时cookie身份信息就被这个yellow网站窃取了。

    攻击背后的原理：
       自动发送get请求：
          黑客代码有这样一句话
           <img src = 'https:// xxx.com ? user = hhh & count = 100'>
            进入网页后自动发送get请求，并且会带上登陆网站的cookie， 加入服务器没有相应的验证机制。 就会认为是一个正常的用户
             然后进行操作。
        自动发送post请求：
            黑客自动填写一个表单，写了一个自动提交的脚本，同样携带用户cookie信息，让服务器以为是一个正常用户在操作。
        
        诱导点击发送get请求：
            <a src = 'http.....'>诱导用户点击，之后操作类似于get请求。
    和xss攻击相比，csrf攻击并不需要将恶意代码注入用户的当前页面html文档中， 而是跳转到新的页面， 利用服务器漏洞和用户
    之前的登陆状态模拟用户操作。

    防范措施：
        验证码：
           csrf往往是在用户不知情情况下构造了网络请求，而验证码会强制用户必须与应用进行更新。
           因为出于用户考虑，不能给网站所有的操作都加上验证码。因此，验证码只能作为防御 CSRF 的一种辅助手段，而不能作为最主要的解决方案。
        利用cookie的SameSite属性：
           csrf攻击中重要的一环就是自动发送目标站点的cookie，就是因为这个cookie让服务器误认为就是用户，
            samesite有三个属性：
                strict： 在这个属性下， 浏览器完全禁止第三方携带cookie， 
                lax模式： 只能在get请求提交表单或者a标签发送get请求的请求下携带cookie，
                None： 默认模式，请求都会自动携带cookie，

        验证来源站点：
           这个需要请求头的两个字段： origin和referer；
           origin包含域名信息， referer包含具体的url路径
           但是通过ajax自定义请求，可以伪造请求路径，因此安全性略差。

           origin:  指示了请求来自那个站点(协议，主机，端口)，只有服务器名，不包含路径信息
                   添加origin的情况： post options， put， patch，delete请求都会添加， get head不会添加
                                    跨域请求， 所有的跨域请求都会添加origin请求头
           Referer: 指示了请求来自于那个具体的页面(协议+域名+查询参数 不包含锚点信息)。包含服务器名和具体路径，
                  不会添加reffer情况： 来源页面采用 file和 data URI协议
                                      来源页面采用https协议，而请求页面采用http协议

        csrf token： 
            浏览器向服务器发送请求的时候， 服务器生成一个字符串， 将其植入返回的页面。
            然后浏览器如果发送请求，必须带上这个字符串，由服务器验证是否合法。这个字符串就是csrd token
           
        本质上讲，XSS 是代码注入问题，CSRF 是 HTTP 问题。 XSS 是内容没有过滤导致浏览器将攻击者的输入当代码执行。
        CSRF 则是因为浏览器在发送 HTTP 请求时候自动带上 cookie，而一般网站的 session 都存在 cookie里面(Token验证可以避免)。

区别一：

CSRF：需要用户先登录网站A，获取 cookie
XSS：不需要登录。
区别二：（原理的区别）

CSRF：是利用网站A本身的漏洞，去请求网站A的api。
XSS：是向网站 A 注入 JS代码，然后执行 JS 里的代码，篡改网站A的内容。
