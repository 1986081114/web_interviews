
浏览器的性能优化有很多比较常见的就是异步加载js脚本文件。

1.白屏时间：
  概念： 即用户点击一个链接或打开浏览器 输入url，从屏幕空白到显示第一个画面的时间。

  开始等待页面的展示， 页面渲染时间越短，用户等待时间越短， 用户感知页面的速度越快，这样极大的提升用户的体验，

  白屏过程：
     1.dns lookup： 即浏览器从dns服务器中进行域名查询。
            通常加载整个页面过程。浏览器会多次进行dns查询， 包括页面本身域名查询， 以及在页面加载外联js css 等资源时
     2.建立TCP连接请求：
     3.服务端请求响应时间：
        tcp连接建立后，web服务器接受请求，开始处理，web服务器根据请求类型的不同， 进行相应的请求，静态资源如图片， css文件
         静态html， 如其他注册的请求转发给对应的服务器， 进行数据处理， 缓存中取数据，将数据按照约定好的格式相应给浏览器。
    4.客户端解析， 渲染页面
        当解析遇到内联的js代码会阻塞dom树的构建， 
    
    白屏性能优化：

 2.首屏时间： 从浏览器输入地址并回车到首屏内容渲染完成的时间
   首屏时间 = 白屏时间 + 首屏渲染时间

怎么优化首屏加载时间：
    首先首屏加载主要影响用户的体验
      1. 这个网站是否请求成功了， fcp-- 第一个内容被加载出来了
      2.这个网站是做什么的？ LCP: 最大内容显示时间
      3.网站可以与用户交互： TTI(0.38S)
      影响因素主要是还是网络和资源大小：
         
         资源体积太大： 资源压缩， 传输压缩， 代码拆分， 缓存，tree shaking等
         首页内容太多： 路由/组件/内容懒加载， 预渲染（ prerender-spa-plugin）/ssr， 内嵌首屏加载的js/css
         加载顺序不合适： prefetch。preload

preload   是告诉浏览器页面必定需要的资源，浏览器一定会加载这些资源；
prefetch 是告诉浏览器页面可能需要的资源，浏览器不一定会加载这些资源。

preload 是确认会加载指定资源，如在我们的场景中，x-report.js 初始化后一定会加载 PcCommon.js 和 TabsPc.js, 则可以预先 preload 这些资源；
<link rel="preload"   href="https://at.alicdn.com/t/font_zck90zmlh7hf47vi.woff" as="font">
<link rel="prefetch"  href="https://at.alicdn.com/t/font_zck90zmlh7hf47vi.woff" as="font">



优化：
   打包后js主要分为三种js文件
       第三方库的js
       依赖的一些js文件 runtime 
       自己编写的一些逻辑代码 main

   可以拆减自己编写的逻辑代码：
     首屏的时候先加载自己马上使用的js文件，其余页面的js先不加载
     根据路由的懒加载
    

