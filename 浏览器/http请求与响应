
浏览器中的HTTP请求从发起到结束一共经历了如下八个阶段：
构建请求、查找缓存、准备IP和端口、等待TCP队列、建立TCP连接、发起HTTP请求、服务器处理请求、服务器返回请求和断开连接
请求报文：
    请求行      ：       方法 URL 版本
    请求头               首部 值域
    空行
    请求体              实体，请求数据

    POST /user HTTP/1.1                       // 请求行
    Host: www.user.com
    Content-Type: application/x-www-form-urlencoded
    Connection: Keep-Alive
    User-agent: Mozilla/5.0.                  // 以上是请求头
    （此处必须有一空行 |                         // 空行分割header和请求内容 
    name=world    

    请求行： 包括三个部分： 请求方法，请求路径， http协议版本号
            
    请求体： 
        get没有请求数据，post有
        与请求数据最长使用的请求头 Content-type， Content-Length
        


响应报文： 
        状态行： 服务器http版本协议 影响状态码 状态码文本描述
        响应首部： 
        空行
        相应实体： 实体包含web客户端请求的对象， Content-type和 Content-Length用于计算实体的位置，数据类型，数据长度。
    

常见的首部可以分为四种首部，
请求首部：
          Host: 请求资源所处的互联网的主机名和端口号， 虚拟主机运行在同一个ip上，可以使用host加以区分
          User-agent: 创建请求的浏览器和用户代理名称等信息，传给服务器
          If-Match
              服务端有个ETag（实体标记）的字段，与特定资源关联的确定值，当资源更新后Etag也会随之更新。
             所以当客户端If-Match的值若与服务端的ETag一致，才会执行请求，否则会拒绝412
           if-range：If-Range 字段值若是更 ETge 值或更新日期时间一致，那么就作为范围请求处理。若不一致，则忽略范围请求，返回全部资源。
          if-none-Match： 本地资源未修改返回304（比较标记）
          if-modified-since： 本地资源未修改返回304（比较事件）
          Accept: 告诉服务器，客户端希望接收的数据类型，以及设置接收优先级
                    文本类型： text/html， application/json
                     图片： image/gif image/png
                     视频文件： video/mpeg
                 想要给接受类型设置优先级，使用q增加额外权重， q范围0-1（最大）
        Accept-charset： 客户端支持的字符集，也可以设置优先级
        appept-Encoding： 客户端支持的编码方式
                   如gzip压缩 compress
        accept-language： 客户端能够处理的语言
        Authorization：用户代理的认证信息
     
响应首部：
 Accept-range：接受的请求的字节范围，分段下载
 Etag：资源的标识
 age：资源在代理缓存存在的时间
 server：服务器名字
 Location： 客户端重定向的URL

通用首部：
Cache-control:控制缓存策略
connection： 管理持久连接 Connection: keep-alive 保持连接 ,http请求每次都需要tcp连接，并且使用一次之后就断开， 使用keep-alive可以改善这个状态， 即可以发送多个请求， 减少等待时间， 但是如果配置不当的keepalive，可能会浪费资源，
date：创建报文的日期和时间

实体字段：
    allow： 资源的正确请求方式
    content-encoding：内容的编码方式
    contnet-language：内容使用的语言
    contnet-length：请求体长度
    expires： 内容过期时间
    content-type： 内容的媒体类型
    last-modified： 内容最后修改的时间




 常见的content type ：
   内容编码类型，contentType用于表明发送数据流的类型，服务器根据编码类型使用特定的解析方式，获取数据流中的数据。
     3.1 application/x-www-form-urlencoded 
        HTTP会将请求参数用key1=val1&key2=val2的方式进行组织，中文或特殊字符如"/"、","、“:" 等会自动进行URL转码并放到请求实体里面，一般用于表单提交。
    3.2 multipart/form-data
        需要在表单中进行文件上传时，就需要使用该格式，
        首先生成了一个 boundary 用于分割不同的字段，在请求实体里每个参数以------boundary开始，然后是附加信息和参数名，然后是空行，最后是参数内容

    3.3application/json： JSON数据格式
    text/html ： HTML格式  
    text/xml ： XML格式
    image/gif ：gif图片格式
    image/jpeg ：jpg图片格式
    image/png：png图片格式
    application/xml： XML数据格式
    【text忽略xml的编码格式的设定 采用us-ascall编码，application会采用头部编码格式的设定】


    预请求条件：

      预请求：预请求就是复杂请求（可能对浏览器产生副作用的请求） 浏览器自发的发起的预请求,浏览器会查询到两次请求，第一次的请求参数是options，
      以检测试实际请求是否可以被浏览器接受
     w3c规范要求，对复杂请求，浏览器必须先使用options发起一个预检请求，从而获知服务器是否允许该跨域请求，服务器确认以后才能发起实际的HTTP请求，
          否则停止第二次正式请求。

     简单请求不会触发预请求：
       简单方法：
           1.get ，head， post
           2.content-type局限于： text-plain, multipart/form-data, application/x-www-form-urlencoded.
           3.除了自动设置的首部字段， 人为设置金可以包括以下字段：
               Accept
                Accept-Language
                Content-Language
                Content-Type （需要注意额外的限制）
                DPR
                Downlink
                Save-Data
                Viewport-Width
                Width
              
    预请求常用字段：
        Access-Control-Request-Method首部字段： 告知服务器实际请求所使用的 HTTP 方法；
         Access-Control-Request-Headers首部字段： 告知服务器实际请求所携带的自定义首部字段。


    长连接什么时候i会超时：

      HTTP协议根本没有长短连接这一说，HTTP协议是基于请求/响应模式的，因此只要服务端给了响应，本次HTTP连接就结束了，或者更准确的说，
      是本次HTTP请求就结束了，根本没有长连接这一说。那么自然也就没有短连接这一说了，
      本质上是说的TCP连接。TCP连接是一个双向的通道，它是可以保持一段时间不关闭的，因此TCP连接才有真正的长连接和短连接这一说

      长连接是为了复用，那既然长连接是指的TCP连接，也就是说复用的是TCP连接。那这就很好解释了，也就是说，长连接情况下，
      多个HTTP请求可以复用同一个TCP连接，这就节省了很多TCP连接建立和断开的消耗。请求了博客园的一个网页，这个网页里肯定还包含了CSS、JS等等一系列资源
      ，如果你是短连接（也就是每次都要重新建立TCP连接）的话，那你每打开一个网页，基本要建立几个甚至几十个TCP连接，

      开启Keep-Alive的优缺点：
            优点：Keep-Alive模式更加高效，因为避免了连接建立和释放的开销。
            缺点：长时间的Tcp连接容易导致系统资源无效占用，浪费系统资源

    TCP实现了一种保活机制，主要的设计初衷是：
       客户端和服务器需要了解什么时候终止进程或者与对方断开连接
       *主要的工作原理就是：**探测方会在自己一端设计一个计时器，当计时器被触发之后，向对方发送一个探测报文。
       如果对端给自己回送一个ACK，那么就代表对方仍存活；如果在指定的时间内没有给自己回送ACK，那么就确认对方已经断开连接，从而断开本次TCP连接

       Keep-Alive timeout
          Httpd守护进程，一般都提供了keep-alive timeout时间设置参数，keepalive_timout时间值意味着：一个http产生的tcp连接在传送完最后一个响应后，
          还需要hold住keepalive_timeout秒后，才开始关闭这个连接。如果超过这个时间就触发tcp保活机制

    长段轮训： 
    其实长轮询和短轮询最大的区别是，短轮询去服务端查询的时候，不管库存量有没有变化，服务器就立即返回结果了。而长轮询则不是，
    在长轮询中，服务器如果检测到库存量没有变化的话，将会把当前请求挂起一段时间（这个时间也叫作超时时间，一般是几十秒）。
    在这个时间里，服务器会去检测库存量有没有变化，检测到变化就立即返回，否则就一直等到超时为止。





       


          