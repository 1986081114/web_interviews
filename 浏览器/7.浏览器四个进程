
     一个进程就是一个程序的运行实例，详细讲就是启动一个程序的时候，操作系统会为该程序创建一块内存， 用来存放代码， 运行中的数据
        和一个执行任务的主线程，我们把这样的一个运行环境叫进程，
        线程依赖进程， 而进程中使用多线程并行处理能提高运行速率。线程可以理解成应用程序中的代码执行器。

        进程是cpu资源分配的最小单位
       线程是cpu调度的最小单位

      进程线程特点：
           进程中任意一个线程指向出错，就会导致整个进程的崩溃。
           线程之间共享进程中的数据
           当一个进程关闭之后，操作系统会回收进程所占的内存
           进程之间的内容互相隔离。  可以避免a的数据写入到b，一个进程崩溃，也不会影响其他线程。  可以使用ipc进行进程通信。

单进程浏览器：
    问题：
       不稳定：
            早期的浏览器要借助插件来实现注入web视频等功能。 但是插件容易出现问题，很可能一个插件崩溃导致浏览器崩溃。
        不流畅：
           执行一个时间较长的任务，所有其余的任务都要等待，导致浏览器失去响应，卡顿，还由内存泄漏，通常浏览器的内核十分复杂， 运行一个
            复杂点的页面再关闭，会存在不能完全回收的情况，时间长了导致内存占用越来越高。浏览器变慢
        不安全：
            当页面与逆行一个插件， 意味着这个插件能完全操作电脑， 如果是一个恶意插件，释放病毒，窃取账号密码，不安全。
多进程时代：
    解决不稳定性：
        进程之间相互隔离，只能通过ipc通信，所以当一个页面或者插件崩溃，影响的仅仅是当前的页面进程或者插件进程，这完美解决了的页面/插件
          崩溃导致整个浏览器崩溃，
    解决不流畅：
         js只是运行在渲染进程里，即使js'阻止了渲染进程，影响的也只是当前的渲染页面，而不会影响浏览器和其余页面，一位内其他脚本
         是运行在他们自己的渲染进程中的，所以即使是由死循环脚本，没有响应的仅仅是当前的页面。对于内存泄漏，当关闭一个页面，争着进程全被关闭，之后该进程
         所占内存会被系统回收，
    安全问题： 
          采用多进程的喊出是使用安全沙箱，可以把安全沙箱看成是操作系统的给进程的一把锁。沙箱内的程序可以运行，但是不能在硬盘上
          写入任何数据，也不能在敏感位置读取数据，例如把文档c盘，操作系统把插进进程和渲染进程锁在沙箱内，这样即使渲染进程或者插件
          进程执行恶意程序，恶意程序也无法突破沙箱区获取系统权限。

目前的多进程架构：
     一个浏览器主进程browser， 一个GPU进程，一个网络进程， 多个渲染进程render，多个插件进程。

 浏览器进程： 
     browser进程：负责浏览器界面的显示， 各个页面的管理，是所有其他类型进程的组件，负责他们的创建和销毁，只有一个
      主要负责界面显示， 用户交互， 子进程管理， 同时提供存储功能，
     renderer 渲染进程 将html css js转换成用户可以交互的二网页，但是renderer进程的数量和用户打开网页的数量不一定一致，因为chromium设计了灵活的机制，
     允许用户配置
      v8运行在该进程，默认情况chrom会为每个页面创建一个渲染进程（如果两个页面站点相同，共用一个），
      出于安全，渲染进程都是在沙箱模式。
    GPU进程： 最多只有一个，gpu使用初衷是为了实现3d css效果， 后来随着网页，chrom的ui界面都选择gpu来绘制， 使得gpu称为浏览器的需求。
    网络进程： 主要负责页面的网络加载， 
    插件进程： 负责插件的运行， 因为插件容易崩溃，所以需要通过插件进程来隔离，保证插件进程崩溃不会影响到浏览器和页面。
           创建的基本原则是每个没中类型的插件只会被创建一次，当且仅当使用时被创建。当有多个网页使用一个插件时，插件进程会为每一个使用者创建一个实例，
           所以插件进程是被共享的。

打开也个页面，至少需要一个网络进程，一个浏览器进程，一个gpu进程，一个渲染进程， 共四个， 如果使用插件 才有插件进程。

进程模型使用特征：
   1，浏览器进程哥页面渲染分开，保证了页面的渲染导致的崩溃不会导致浏览器界面的崩溃。
   2， 每个页面是独立的进程， 保证了页面之间互不影响
   3。插件进程也是独立的，插件本身的问题，不会影响浏览器主界面和网页
   4， cpu进程也是独立的。

每个进程也是多线程的：
    多线程的主要目的是为了保持用户界面的高度响应，保证UI线程不会被任何其他费时的操作影响了对用户操作的响应。
    如渲染进程有多个线程是为了将渲染过程分为多各阶段，对于每一个阶段,都会创建一个线程,从而利用cpu的多核能力，加快页面的渲染速度,
    就像流水线一样处理，极大的提升渲染速度。

缺点:

    更高的资源占用：
       因为每个进程都会包含公共基础结构的副本，意味着浏览器回校更多的内存资源。
    更复杂的体系结构：
       浏览器各个模块知邪见耦合性高，扩展性差，会导致现在的浏览器已经很难适应新的需求。

沙箱环境： https://juejin.cn/post/7346865556328644623
    在浏览器中沙箱环境指的是浏览器为每个标签页提供的隔离环境,这种隔离保证了一个便签页的 js代码无法访问另一个标签页中的内容
    除非两个 页面遵循同源策略或者通过cors明确访问跨源资源,沙箱设计的目的是为了让一些不可信的代码运行在一定环境中，从而限制这些代码访问隔离区外的资源

    使用场景：
       执行第三方js，这个js不可信时
       在线代码编辑器
       web应用安全
       插件和第三方脚本
       vue的服务端渲染，vue服务端渲染实现中，通过创建沙箱执行bundle文件
       vue模板中表达式计算，vue表达式的计算被放在沙盒中，只能访问全局变量的白名单
       jsonp，解析服务器返回的jsonp请求时获取的数据不可信时，可以放在沙箱解析获取数据(如在iframe内插入script发送请求)

    实现沙箱：
       with + new function
       直接通过eval和function不行因为会沿着作用域链往上找篡改全局变量,
       沙箱内地变量访问都在with块级作用域下,
       iframe(相当于嵌套了一个完全独立的html页面),里面有sandbox属性
       

        
            

