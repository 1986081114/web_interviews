
     一个进程就是一个程序的运行实例，详细讲就是启动一个程序的时候，操作系统会为该程序创建一块内存， 用来存放代码， 运行中的数据
        和一个执行任务的主线程，我们把这样的一个运行环境叫进程，
        线程依赖进程， 而进程中使用多线程并行处理能提高运行速率。线程可以理解成应用程序中的代码执行器。

        进程是cpu资源分配的最小单位
       线程是cpu调度的最小单位

      进程线程特点：
           进程中任意一个线程指向出错，就会导致整个进程的崩溃。
           线程之间共享进程中的数据
           当一个进程关闭之后，操作系统会回收进程所占的内存
           进程之间的内容互相隔离。  可以避免a的数据写入到b，一个进程崩溃，也不会影响其他线程。  可以使用ipc进行进程通信。

单进程浏览器：
    问题：
       不稳定：
            早期的浏览器要借助插件来实现注入web视频等功能。 但是插件容易出现问题，很可能一个插件崩溃导致浏览器崩溃。
        不流畅：
           执行一个时间较长的任务，所有其余的任务都要等待，导致浏览器失去响应，卡顿，还由内存泄漏，通常浏览器的内核十分复杂， 运行一个
            复杂点的页面再关闭，会存在不能完全回收的情况，时间长了导致内存占用越来越高。浏览器变慢
        不安全：
            当页面与逆行一个插件， 意味着这个插件能完全操作电脑， 如果是一个恶意插件，释放病毒，窃取账号密码，不安全。
多进程时代：
    解决不稳定性：
        进程之间相互隔离，只能通过ipc通信，所以当一个页面或者插件崩溃，影响的仅仅是当前的页面进程或者插件进程，这完美解决了的页面/插件
          崩溃导致整个浏览器崩溃，
    解决不流畅：
         js只是运行在渲染进程里，即使js'阻止了渲染进程，影响的也只是当前的渲染页面，而不会影响浏览器和其余页面，一位内其他脚本
         是运行在他们自己的渲染进程中的，所以即使是由死循环脚本，没有响应的仅仅是当前的页面。对于内存泄漏，当关闭一个页面，争着进程全被关闭，之后该进程
         所占内存会被系统回收，
    安全问题： 
          采用多进程的喊出是使用安全沙箱，可以把安全沙箱看成是操作系统的给进程的一把锁。沙箱内的程序可以运行，但是不能在硬盘上
          写入任何数据，也不能在敏感位置读取数据，例如把文档c盘，操作系统把插进进程和渲染进程锁在沙箱内，这样即使渲染进程或者插件
          进程执行恶意程序，恶意程序也无法突破沙箱区获取系统权限。

目前的多进程架构：
     一个浏览器主进程， 一个GPU进程，一个网络进程， 多个渲染进程，多个插件进程。

 浏览器进程： 
      主要负责界面显示， 用户交互， 子进程管理， 同时提供存储功能，
      渲染进程 将html css js转换成用户可以交互的二网页， v8运行在该进程，默认情况chrom会为每个页面创建一个渲染进程（如果两个页面站点相同，共用一个），
      出于安全，渲染进程都是在沙箱模式。
    GPU进程： gpu使用初衷是为了实现3d css效果， 后来随着网页，chrom的ui界面都选择gpu来绘制， 使得gpu称为浏览器的需求。
    网络进程： 主要负责页面的网络加载， 
    插件进程： 负责插件的运行， 因为插件容易崩溃，所以需要通过插件进程来隔离，保证插件进程崩溃不会影响到浏览器和页面。

打开也个页面，至少需要一个网络进程，一个浏览器进程，一个gpu进程，一个渲染进程， 共四个， 如果使用插件 才有插件进程。

缺点：    

    更高的资源占用：
       因为每个进程都会包含公共基础结构的副本，意味着浏览器回校更多的内存资源。
    更复杂的体系结构：
       浏览器各个模块知邪见耦合性高，扩展性差，会导致现在的浏览器已经很难适应新的需求。
       
        
            

