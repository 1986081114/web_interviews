V8是js虚拟机的一种，一个翻译程序，将人类能够理解的编程语言js翻译成机器理解的机器语言。
V8之前所有的js虚拟机都采用解释执行的方式，这也是执行速度慢的原因，而V8率先引入“即时编译(JIT)”的双轮驱动的设计。
  同时引入“惰性编译，内联编译，隐藏类等机制”优化js编译执行效率。

高级语言的由来：
   虽然汇编语言对机器语言做了抽象，减少了程序员理解机器语言的复杂度，但是汇编语言仍演示复杂且繁琐的，
   首先不同的cpu有着不同的指令集，如果要使用机器语言或者汇编语言实现一个功能，那么需要对每种架构的cpu编写特定的汇编代码，复杂且繁琐。
   其次，在编写汇编代码时，需要了解和处理器相关的硬件知识，比如，寄存器，内存等，大部分程序员只想专心处理业务逻辑，并不想过多理会处理器相关细节。
   因此需要一种屏蔽计算机架构细节的语言，能适应多种不同的cpu架构语言，专心处理业务逻辑，比如C C++ JAVA JS等，这些高级语言应运而生。

如何识别高级语言代码：
   和汇编语言一样，处理器也不能直接识别高级语言所编写的代码，通常使用以下两种方式执行代码：
     第一种解释执行，将输入的源代码通过 解析器 编译成中间代码，在使用 解释器 解释执行中间代码，输出结果。
        在执行的过程中一行行解释成机器代码在执行，解释一行，执行一行。
     第二种编译执行，先解析器将源代码转换为中间代码，再由 编译器 将中间代码编译成机器代码，通常机器代码以二进制文件形式存储。
       需要执行这段代码直接执行二进制文件就可以。执行的时候直接执行机器语言，不需要先进行解析
    根本区别就是运行时，解释执行需要将源代码解析成机器代码来运行，并没有保存功能，而编译执行在运行前就已经让编译器翻译成机器代码
    这也是编译执行速度更快的原因。 解释执行启动快，执行慢，编译执行启动慢，但执行快。

V8执行js代码：
  V8并没有采用某种单一的技术，二十混合编译执行和解释执行这两种手段，我们将这种混合使用 编译器 和 解释器 的技术成为即时编译JIT（Just In Time）