UDP（用户数据包协议）：无状态不可靠传输协议
TCP（控制传输协议）；可靠性，面向连接
  区别：
   1. udp是面向无连接的，而tcp是面向连接的
         udp像发送数据就发送，只是数据的搬运工，不会对数据进行拆分和拼接处理， 只会给数据添加一个udp头标识，
         tcp是全双工， 两边都设有缓存临时存储数据

    2.udp是不可靠的，tcp是可靠的
        udp没有拥塞控制，即使网络出现拥塞，也不会降低传输速率
        udp尽最大可能交付，即不保证可靠交付
    3.udp面向报文，tcp面向字节流
       udp对应用程序程序脚下来的报文，既不合并也不拆分，值增加一个首部，
       tcp一字节流的方式进行传输
    4.udp 有单播，多播，广播的功能， tcp只支持单播
         udp不知支持一对一传输方式， 同样也支持一对多，多对多，多对一的方式
          tcp只一对一
    5. 首部开销
      udp首部开销小，仅8字节， tcp最小20字节

  tcp三次握手原因：
  谢希仁版《计算机网络》中的例子是这样的，“已失效的连接请求报文段” 的产生在这样一种情况下：
  client 发出的第一个连接请求报文段并没有丢失而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。
  本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。
  于是就向 client 发出确认报文段，同意建立连接。假设不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。
  由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。
  但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。
  采用 “三次握手” 的办法可以防止上述现象发生。例如刚才那种情况，client 不会向 server 的确认发出确认。
  server 由于收不到确认，就知道 client 并没有要求建立连接。”。

  四次挥手原因：
      因为TCP是一个全双工协议，必须单独拆除每一条信道。4次挥手的目的是终止数据传输，并回收资源，此时两个端点两个方向的序列号已经没有了任何关系，必须等待两方向都没有数据传输时才能拆除虚链路，不像初始化时那么简单，发现SYN标志就初始化一个序列号并确认SYN的序列号。因此必须单独分别在一个方向上终止该方向的数据传输。
如果是三次挥手，会怎么样？三次的话，被动关闭端在收到FIN消息之后，需要同时回复ACK和Server端的FIN消息。如果Server端在该连接上面并没有Pending的消息要处理，那么是可以的，如果Server端还需要等待一段时间才可以关闭另外一个方向的连接，那么这样的三次挥手就不能满足条件。


那么问题来了，在客户机A返回确认报文段，进入TIME-WAIT状态后，为什么不能马上结束TCP的连接，
而是还需要再等待2MSL的时间才能正式结束TCP连接呢？
这里主要有两个原因：
是为了保证A发送的最后一个确认报文段能到达B。若这个ACK报文段在传输过程中丢失，处于LAST-ACK状态的服务器B收不到A已发送的FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段，A在2MSL中收到这个重发的FIN+ACK报文段，会再一次重传一次确认报文段，并重新启动2MSL计时器。直至最后B正常收到确认报文段，两边重新进入CLOSE状态。如果A在TIME-WAIT状态不等待一段时间，而是发送完ACK后立即释放连接，在发生上述情况后，服务器B就无法正常进入CLOSE状态。
同样，防止我们上一篇介绍TCP三次握手中提到的“已失效的连接请求报文段”的出现。A发送完最后一个确认报文段后，经过2MSL后，可以使本连接持续时间内产生的所有报文段都从网络中消失。这样，就可以保证下一个新的连接中，不会出现这种旧的连接请求报文段。
以上，就是我们常说的TCP的四次挥手，也就是TCP的连接释放过程.

tcp可靠传输：
 停止等待协议： 每次发送数据就停止，等待对方确认，超时重传
     一次发送一个数据，效率太低，可以采用流水线传输， 为保证可靠性， 需要配合连续ARQ协议和滑动窗口协议

     ARQ协议：
      发送方维护一个一定大小的发送窗口， 位于发送窗口内的所有分组都可以连续发送出去， 中途不需要等待对方确认，发送方在没收到一个确认时就把发送窗口向前互动一个分组
       通常接收方采用累计确认的方式， 不必对收到的分组逐个发送确认， 而是在收到几个分组之后，再发送确认，

      流量控制： 指的是控制发送方的发送速率， 以便接收方来得及接收；
      拥塞控制：
             网络拥塞就是传输的数据超过节点承受能力而导致传输能力下降的情况，拥塞控制就是为了防止过多的数据注入到网络而造成路由器过载
            慢启动：由于不知知道网络的负载能力，最好选择de就是逐步探索，由小到大成倍的增大发送窗口， 
            拥塞避免：让滑动窗口缓慢增大， +1， 慢启动和拥塞控制通常配合使用， 
            快重传：
            快恢复：
  


   