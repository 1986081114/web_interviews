1.生成抽象语法树ast和执行上下文
2.生成字节码
    解释器Ignition会根据ast生成字节码，并解释执行字节码。
    其实v8一开始没有字节码， 二十直接将ast转换成机器码， 由于执行机器码效率非常高，所以一开始很受欢迎， 但是由于机器码占用的内存非常高， 
    v8需要消耗大量的内存来存放转换后的机器码， 所以引入字节码
    字节码就是介于ast和机器码之间的一种代码， 字节码需要通过解释器将其转换成机器码才能执行
3.执行代码：
    生成字节码接下来就要进入到执行阶段了
    通常，有一段第一次执行的字节码， 解释器会追条解释执行成机器码， 如果发现有热点代码，比如一段代码被执行多次， 就称为热代码， 那么后天的编译器旧
    会把该段热点字节码编译成高效的机器码， 当后续在执行这段代码， 只需要执行编译后的机器阿就可以。

    JIT（即时编码）： 字节码配合解释器和编译器的编码方式。：解释器在解释执行字节码的同时，收集信息， 当发现末端代码变热起来， 编译器
    把热点代码转换成机器阿， 并保存起来， 以备下次使用。