用户输入url并回车
浏览器进程检查url，组装协议，构成完整的url
浏览器进程通过进程间通信（IPC）把url请求发送给网络进程
网络进程接收到url请求后检查本地缓存是否缓存了该请求资源，如果有则将该资源返回给浏览器进程
如果没有，网络进程向web服务器发起http请求（网络请求），请求流程如下：
    进行DNS解析，获取服务器ip地址，端口（端口是通过dns解析获取的吗？这里有个疑问）
    利用ip地址和服务器建立tcp连接
    构建请求头信息
    发送请求头信息
    服务器响应后，网络进程接收响应头和响应信息，并解析响应内容
网络进程解析响应流程；
    检查状态码，如果是301/302，则需要重定向，从Location自动中读取地址，重新进行第4步 （301/302跳转也会读取本地缓存吗？这里有个疑问），如果是200，则继续处理请求。
    200响应处理：检查响应类型Content-Type，如果是字节流类型，则将该请求提交给下载管理器，该导航流程结束，不再进行后续的渲染，如果是html则通知浏览器进程准备渲染进程准备进行渲染。
准备渲染进程
   浏览器进程检查当前url是否和之前打开的渲染进程根域名是否相同，如果相同，则复用原来的进程，如果不同，则开启新的渲染进程
传输数据、更新状态
    渲染进程准备好后，浏览器向渲染进程发起“提交文档”的消息，渲染进程接收到消息和网络进程建立传输数据的“管道”
    渲染进程接收完数据后，向浏览器发送“确认提交”
    浏览器进程接收到确认消息后更新浏览器界面状态：安全、地址栏url、前进后退的历史状态、更新web页面
渲染进程将HTML内容转换为能够读懂的DOM树结构。
渲染引擎将CSS样式表转化为浏览器可以理解的styleSheets，计算出DOM节点的样式。
创建布局树，并计算元素的布局信息。
对布局树进行分层，并生成分层树。
为每个图层生成绘制列表，并将其提交到合成线程。
合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。
合成线程发送绘制图块命令DrawQuad给浏览器进程。
浏览器进程根据DrawQuad消息生成页面，并显示到显示器上

挡在浏览器地址输入地址：

1。再发起网络请求前，浏览器会先在浏览器缓存中查找是否有需要的文件，当了浏览器发现请求的资源已经在浏览器缓存中存有副本。会拦截请求。返回该资源副本
      并结束请求。
2.准备ip和端口：
    在http工作开始之前，浏览器需要通过tcp与服务器建立连接， 也就是说http的内容是通过tcp实现。所以需要dns 负责通过域名查找ip；
    通常url没有指明端口号，http协议默认是80.
3.等待tcp队列：
    chrom有个机制，同一个域名只能有6个tcp连接， 如果在同一个域名下有多余6个的请求发生那个，那么多雨的就会进入队列等待排序，
4.建立TCP连接请求： 
5.发送http请求；
   一旦建立tcp连接，浏览器就可以和服务器进行通信， 
6.服务器处理http请求：
     6.1返回请求：   
     6.2通常一旦客户端返回了请求数据，关闭tcp连接，（除非： connection：keep-alive）



为什么很多站点第二次打开速度会快很多：
    主要是一些数据被缓存：
         dns缓存和页面资源被缓存


   渲染进程中，包含线程分别是：

    一个主线程（main thread）

    多个工作线程（work thread）

    一个合成器线程（compositor thread）

    多个光栅化线程（raster thread）
    
    构建dom：
        主线程会解析数据转成dom对象 字节-字符-令牌- 节点- dom
    样式计算：
       分为三个阶段：
         格式化样式表  
             拿到的时0，1字节，浏览器无法识别，所以渲染进程收到css文本会执行一个操作， 转化成浏览器理解的stuleSheets
         标准化样式表：
             在写css样式时候，可能会有2rem， red等，不容易被渲染引擎理解，所以需要标准化， em-》px， red-》rageb格式
         计算每个dom节点具体样式
             通过格式化和标准化， 计算规则使用继承和层叠
               继承： 每个节点默认继承父节点的样式，找不到就采用浏览器默认的样式
               层叠：样式层叠：合并来自多个源的属性值的算法
            形成cssom树
    生成布局树：
        有了dom树和样式计算，通过浏览器的布局系统，生成布局树（渲染树）
         1.创建布局
           遍历DOM树中的所有可见节点，并把这些节点加到布局中；
          不可见的节点会被布局树忽略掉，如head标签下面的全部内容，再比如body.p.span这个元素，
           因为它的属性包含 dispaly:none，所以这个元素也没有被包进布局树
         2.布局计算
            有了一棵完整的布局树。那么接下来，就要计算 每个元素的具体位置信息
           
        遍历dom树可见节点：并把这些节点加到布局树，。布局树的结构与 DOM 树的结构十分相似，但只包含将会在页面中显示的元素。
        当一个元素的样式被设置成 display: none 时，元素就不会出现在布局树中，但那些样式被设置成 visiblility：hidden 
        的元素会出现在布局树中。相似的，当我们使用一个包含内容的伪元素（例如p::before { content: 'Hi!' }）时，
        元素会出现在布局树中即使这个元素不存在于 DOM 树中，这也是为什么我们使用 DOM 提供的 API 无法获取伪元素的原因。
        
  分层：
        找到所有元素的的几何关系，
       生成图层树：
           根据显示合成和隐式合成创建新的图层：
              显示合成：
                   拥有层叠上下文的特点： opacity值不为1， transfrom不为0，position不为static且设置了z-index；
                   需要剪裁的地方： 如滚动条
              隐式合成： z-index 比较低的会被提升为一个单独的图层
                缺点： 根据上面的文章来说，在一个大型的项目中，一个z-index比较低的节点被提升为单独图层后，
                层叠在它上面的元素统统都会提升为单独的图层，我们知道，上千个图层，会增大内存的压力，
                有时候会让页面崩溃。这就是层爆炸
             需要剪裁（clip）的地方也会被创建为图层。
    绘制：
      主线程会遍历布局树生成一系列绘画记录， 可以看成元素绘制的先后顺序
       合成线程
        分块： 由于有些图层太大，如果一次都加载会有太大的开销：因此合成线程会将图层划分为图块，
        栅格化：文档结构，样式，几何位置 绘画顺序等信息转成显示器中的像素， 这个转化的过程叫光栅化。由栅格线程完成。
        合成线程会选择视口附近的图块，交给栅格化线程生成位图。
        生成视图过程会使用gpu加速， 使用 GPU 生成位图的过程叫快速栅格化，或者 GPU 栅格化，生成的位图被保存在 GPU 内存中
      合成线程就会通过IPC向浏览器进程（browser process）提交（commit）一个渲染帧。
     显示在屏幕上

      GPU加速原因：
       在合成的情况下，直接跳过布局和绘制流程，进入非主线程处理部分，即直接交给合成线程处理。
       充分发挥GPU优势，合成线程生成位图的过程中会调用线程池，并在其中使用GPU进行加速生成，而GPU 是擅长处理位图数据的。
       没有占用主线程的资源，即使主线程卡住了，效果依然流畅展示

       合成原因：
           传统的做法是将可视区域的内容进行光栅化。随着用户滚动页面，不断的光栅化更多的区域。唯一的缺点就是每当页面滚动，
            光栅线程都需要对新移进视图的内容进行光栅化，这是一定的性能损耗，为了优化现代浏览器蚕蛹合成做法。

            合成就是将一个页面分成若干层，然后分别对他们光栅化，最后在合成线程里面合并成一个页面的技术。
            当用户滚动页面时，由于页面各个层都已经被光栅化了，浏览器需要做的只是合成一个新的帧来展示滚动后的效果罢了。
            成器线程开始对层次数的每一层进行光栅化。有的层的可以达到整个页面的大小，所以合成线程需要将它们切分为一块又一块的
            小图块（tiles），之后将这些小图块分别进行发送给一系列光栅线程（raster threads）进行光栅化，结束后光栅线程会将
            每个图块的光栅结果存在GPU Process的内存中。
         

       




     