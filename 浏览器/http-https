1.http:超文本传输协议
 https: 超文本传输安全协议 是以安全为目的的HTTP通道，是http的安全版

  区别： 
     1.http的url是以http开头吗，而https是https开头
     2.http标准端口是80， 而https标准端口是443
     3.http无需加密，无状态，无连接的，是不安全的， 而https是ssl+http构成的可进行加密传输，身份验证的网络协议
         无状态：协议对于事件处理没有记忆功能，每次请求都是独立的。
         无连接：限制每次连接只处理一个请求，服务器处理完客户端请求，并得到答复，就会断开连接。（Keep-Alive 功能（长连接）
     4.https需要证书
     5.HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了
        TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。

 2.http的请求方法有哪些？get、post的区别，别的方法是干什么的
    get post 区别
       2.1 GET参数通过URL传递，POST放在message body中。
          get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。
            post是通过HTTPpost机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。
       2.2get传送的数据有长度限制， 而post没有限制
       2.3安全性问题， 使用get参数会显示在地址栏， 而post不会，所以安全性会很低
       2.4，get从服务器获取数据， post主要对数据增删改。
       2.5对于get请求，服务器用request.QueryString获取变量， 而post使用request.From获取
       2.6get在回退时，是无害的， 而post再次提交
       2.7get请求会被浏览器主动缓存，post不会
       2.8对参数的数据类型，GET只接受ASCII字符，而POST没有限制。
       2.9ET和POST还有一个重大区别
                对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；
                而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。
        2.10：那为什么推崇使用post来处理敏感数据呢？
             为get的记录会保存在浏览器，上网日志中，而使用Post，因为数据不会记录存储在浏览器的记录和网址访问记录中，
              这样会有更大的安全性。

    get：获取资源 ，幂等的（1.0，1.1）
    post：传输实体主体 不幂等， 多个请求后一个不会吧前一个覆盖掉（1.0，1.1）
    put：传输文件，幂等， 多个请求 后一个会把前一个覆盖，（更改）（1.0，1.1）
    head： 获得报文首部， 和get类似只是不返回报文主体部分（1.0，1.1）
    delete：删除文件，幂等（1.0，1.1）
    options：询问支持的方法 （1.1）
    trace：追踪路径（1.1） 让web服务器将之前的请求通信环回给客户端的方法
    connect：要求使用隧道协议连接代理（1.1），与代理服务器通信时建立隧道，实现用隧道协议进行通信

3.
HTTP中间人攻击： 
   http协议中报文都是以明文的方式进行传输，不做加密
    例如，客户端给服务端发送一个请求A，由于输入信息是明文的，这个信息有可能被某个中间人恶意截获篡改，这种行为就加叫做中间人攻击
        对称加密： 客户端和服务端实现约定一种加密方式，并且约定一个随机生成的密钥，后续的通信中，信息发送都是用密钥对信息加密，
        而信息接收方通过相同的密钥对信息解密
                  但也不是绝对安全的， 虽然我们在后续的通信中对明文进行了加密，但是第一次约定加密方式和密钥的通信任然是明文，
                  如果第一次就被拦截，密钥就会泄露
                  中间人仍然可以揭秘后续所有的通信内容。
        非对称加密：非对称加密的一组密钥包含一个公钥一个私钥，明文既可以用公钥加密私钥解密，也可以用私钥加密，公钥解密。
             建立通信中，客户端首先将自己的公钥key1发送给服务端，
             服务端使用生成一个用于加密的密钥key2，并且用key1加密，发送给客户端
             客户端利用非对称加密的私钥，即开公钥key1的加密得到key2，从此两人用key2进行对称加密
             虽然中间人不知道key1的私钥是多少，但是可以偷天换日， 自己生成一堆公钥私钥，把自己的公钥key3发给服务端，
             服务端不知道key3是属于中间人的， 按照之前的流程key3加密key2，
             中间人截取这一次通信， 解开key3的加密，得到key2，然后再用客户端发来的key1加密发送给客户端。
             这样尽管双方通信用key2进行了加密， 也可以被中间人进行解密。
        第三方 权威证书颁发机构（CA）
            证书包括： 证书颁发机构， 服务端网址， 机构私钥加密的服务端公钥， 机构私钥加密的证书签名，域名，有效期
            1.作为服务端，首先将自己的公钥key1发给证书机构，申请证书
            2.证书机构自己拥有一对公钥私钥， 机构利用自己的私钥加密key2，并且通过服务端网址等信息生成一个证书签名， 证书机构同样对证书签名加密，证书制作完成发送给服务端
            3.当客户端像服务端请求数据， 服务端把自己的证书返回给客户端
            4.客户端接收到证书， 第一件事验证证书的真伪， 各大浏览器和操作系统都已经维护了所有的权威证书机构的名称和公钥，
            从本地找到对应的机构公钥，解密出证书签名。
               接下来客户端按照同样的签名规则，自己也声称一个证书签名，如果两个签名一直，说明证书是有效的。
                验证成功，客户端就可以放心再次利用机构公钥，解密出服务端公钥key1
            5.客户端生成自己的对称加密密钥key2，并且用服务端公钥key1加密key2发送给服务端。
            6.最后小红，小红用自己的私钥揭开加密， 得到对称密钥key2，于是两人用key2进行对称加密通信。

            如果中间人也想机构申请证书，并把服务端证书偷换自己的证书？ 
               
               证书签名都是由服务端网址等信息生成，并且经过机构加密，中间人无法篡改，发送给客户端的证书是无法通过验证的。


https握手（加密）过程
  https采用对称加密算法加密数据 + 非对称加密算法交换密钥 +数字证书验证身份 = 安全 
  对称加密原因： 非对称加密的加密解密效率非常低，而http的应用场景中通常端到端存在大量的交互，非对称加密的效率无法接受。
                而且一对公私钥只能实现单向的加解密， 而且也不愿意把自己的私钥发送给别人。
  非对称加密：实现身份认证和密钥协商，

  https将报文直接将信息传递给ssl套接宇进行加密，ssl加密后将报文发送给TCP，tcp将加密后的报文发送给目的主机。
  目的主机获取后，使用ssl解密在发给对应进程、

   握手过程：
      1.客户端向服务器发送请求，请求中包括客户端支持的tls协议版本号，还有一个"client random"随机字符串，客户端支持的加密方法
      2.服务器端接受到请求后，确认双方支持的加密算法，tls协议版本，并给出服务器的证书，以及一个server random"随机字符串。
      3.客户端收到服务器的证书后，客户端的ssl验证证书合法性以及是否吊销等，生成数随机字符串"premaster secret，
          并使用证书中的公钥，加密这个随机数，发送给服务器，还会提供一个前面所有内容的hash值，供服务器验证、
      4.服务器使用证书的私钥，解密客户端的随机数premaster secret（私钥），
       
      5.：客户端和服务器均使用 client random，server random 和 premaster secret，
     6.并通过商量好的加密算法生成同的共享密钥 KEY。
      7. 客户端就绪：客户端发送经过共享密钥 KEY加密过的"finished"信号。
     8. 服务器就绪：服务器发送经过共享密钥 KEY加密过的"finished"信号。
    达成安全通信：握手完成，双方使用对称加密进行安全通信。



    HTTPS中间人攻击：

      攻击过程： 
        客户端像服务端发送请求，申请公钥，被拦截
        拦截者像服务器发送请求要公钥，
        服务器向客户端发送公钥
        攻击者截取公钥，保留在就自己手上，
        攻击者伪造公钥发给客户端。
        客户端收到伪造公钥后，生成加密hash发给服务端，
        攻击者获取加密hash，然后用自己的私钥解密获得加密方法，和随机数，获得真密钥，
        同时生成假的加密hash值，发给服务器。
        服务器用私钥解密获得假秘钥。
        服务器用加秘钥加密传输信息
防范：
  某种方法来确定他们是真正拿到了属于对方的公钥，

https缺点：
   使用https是有门槛，需要权威机构CA颁发证书，从证书选择，部署，都比较费力
   https性能消耗大于http，因为要加密。
   购买证书需要花销

SSL和TLS区别：
        都是加密协议， 在传输层进行加密， ssl是tls的前身，现在大多使用tls，因为ssl有漏洞，

  对称加密算法：AES
      一种常见的对称加密算法 加密过程涉及四个操作： 字节替换， 行移动， 列混淆， 轮密钥加， 解密过程分别为对应的逆运算。

  非对称加密算法：RSA
       随机选取一个素数对(p,q)，
       N；p*q = N；p
       r: 欧拉函数r = 欧拉（N）
       e： 随机选择和r互质的数 65537一般取
       d：以欧拉定理为基础，e关于r的模再取反
       pq要销毁
       （N,e）公钥，（N， d） 私钥
      
   