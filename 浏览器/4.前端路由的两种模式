现在网页应用程序越来越多的使用ajax异步请求完成页面的无缝刷新，spa在于页面交互的过程中，不再重新刷新页面，获取数据也是通过
ajax异步获取，页面流畅，但是由于spa中用户的交互是通过js改变html，页面本身并没有变化， 导致两个问题：
    spa无法记住用户的操作记录，无论是刷新，前进，后退
    spa只有一个url，不方便搜索

单页面应用利用了js动态变换网页内容， 避免页面重载，路由则提供了浏览器地址的变化， 网页内容也随着变化，
前端路由： 保证只有一个页面，且与用户交互时，为spa中每个视图展示匹配一个特殊的url。在刷新，前进，后退都通过这个特殊的url实现


路由需要实现的三个功能：
   0.监听到url的变化
   1.浏览器地址发生变化，页面变化
   2.点击浏览器后退，前进按钮，网页内容跟随变化
   3.刷新浏览器，网页加载当前路由对应内容

实现方式：
    hash方式： 监听浏览器地址hash值变化，执行相应的js切换网页
    history： 利用history API 实现url地址改变， 网页内容改变
    最明显区别局势hash在浏览器地址添加#号，而history可以自定义地址

hash模式：
  使用window.location.hash属性及窗口的onhashchange事件，可以实现监听浏览器地址hash变化执行相应的js切换页面，
     hash指的是地址中#以及后面的字符，也称散列值，也可称为锚点
     散列值是不会随请求发送到服务器端，所以改变hash是不会重新加载页面
     监听window的hashchange事件，当散列值改变，可以通过location.hash来获取和设置hash的值
     通过hashchange事件实现页面内容的更新
     location.hash值的变化会直接反映到浏览器地址栏

history模式：
    window.history属性指向history对象，他表示当前窗口的浏览历史。当发生改变，只会改变页面的url，不会刷新页面
    history.length:当前窗口访问过的网址数量
    history.back(): 移动到上一个网址，当访问第一个网址，该方法无效
    history.forward()：移动到下一个网址，访问最后一个，无效
    history.go()：接收一个整数作为参数，跳转，如果参数超过实际网址范围，方法无效，如果不指定参数，默认为0
    history.pushState(state,title,url)：添加新的状态到历史状态栈
    history.replacState(state,title,url)用新的状态代替
    history.state： 返回当前状态

区别:
  url展示上， hash模式有#， history模式没有。
  刷新页面时， hash可以正常加载到hash值对应的页面， 二historu没有处理会返回404， 一般需要后端将所有页面重定向
  兼容性， hash可以兼容低版本浏览器和ie
  

   