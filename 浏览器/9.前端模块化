模块： 
    将一个复杂的程序依据一定的规则封装成几个块，之后再组合在一起。
    块内部数据与实现是私有的， 只向外部暴露一些接口与外部通信。
模块化好处：
    减少命名冲突
    更好的分离，按需加载， 更高复用性
    更好的维护性
模块如何提供帮助：
   模块可以提供更好的方法组织函数和变量，并放入到模块作用域， 模块作用域可用于在模块中的函数之间共享变量
   但与函数作用域不同， 模块作用域也可以将变量提供给其他模块， 并可以准确说明哪些可以共享，通过 export 引入
   可以很清晰的说明它们之间的依赖关系。显氏的。一旦能够在模块之间导入导出变量，就可以把大妈分解成独立的小块， 然后再
   重组这些代码，可以创建出不同的应用程序。

 模块工作

模块化的进化过程：
   1）：全局function模式， 将不同的功能封装成不同的全局函数。
       问题： 污染了全局命名空间， 容易引起命名冲突或数据不安全， 而且模块之间看不出直接关系
   2）： namespace模式， 简单对象封装
      能减少全局变量， 解决命名冲突
      数据不安全， （外部能直接修改模块内部的数据），内部所有状态都被暴露
      let myModule = {
            data: 'www.baidu.com',
            foo() {
                console.log(`foo() ${this.data}`)
            },
            bar() {
                console.log(`bar() ${this.data}`)
            }
            }
      myModule.data = 'other data' //能直接修改模块内部的数据
      myModule.foo() // foo() other data

  3）：iife，匿名函数自调用（闭包）
        作用： 数据是私有的， 外部只能通过暴露的方法操作
        问题：当前模块不能依赖另一个模块


引入多个script问题：
  请求过多： 如果依赖过多模块， 那样就会发送多个请求， 导致请求过多
  依赖模糊：
     script 之间关系是隐氏的。不了解依赖间的关系， 不了解之间的顺序，如果顺序错了很容易出错
    难以维护：
      
模块化规范：
   1）：CommonJS:
        在服务器端：模块的加载是运行时同步加载的
        在浏览器端，模块需要提前编译打包；
        
         特点： 所有的代码都运行在模块作用域，不会污染全局
                模块可以多次加载，但只会在第一次加载时运行一次， 然后运行结果被缓存，
                     以后再加载，就直接读取缓存结果， 想要模块再次运行，必须清楚缓存
                模块加载的顺序，按照代码中出现的顺序。
                同步加载的，只有加载完，才能继续执行后续操作
                输入的值是被输出值的拷贝，也就是说，一旦输出这个值，模块内部变化就影响不到这个值
        语法：
            module.exports = value   exports.xxx = value
            require(文件路径),
          
           // example.js
            var x = 5;
            var addX = function (value) {
            return value + x;
            };
            module.exports.x = x;
            module.exports.addX = addX;

            var example = require('./example.js');//如果参数字符串以“./”开头，则表示加载的是一个位于相对路径
            console.log(example.x); // 5
            console.log(example.addX(1)); // 6

        缺点：
            commonjs加载是同步的，必须等对应模块加载完，才继续执行， 在服务器没什么问题，但不适合浏览器


    2）AMD： 
        commonjs规范加载模块是同步的，也就是说只有加载完才能执行后面的操作，amd是非同步的。允许指定回调函数
           如果是浏览器环境， 要从服务端加载模块， 这是必须采取非同步的模式，因此浏览器一般采用amd模式

         语法规范：
         定义define方法，将代码定义为模块， 通过require方法加载 加载data-main的数据
          <script data-main="js/main" src="js/libs/require.js"></script> 不是使用才加载
    3） CMD：
         cmd专门用于浏览器端， 模块加载是异步的， 并整合了commonjs的优点，cmd规范整合了commonjs和amd规范的特点
            语法规范：
               //定义没有依赖的模块
                define(function(require, exports, module){
                exports.xxx = value
                module.exports = value
                })
                //定义有依赖的模块
                define(function(require, exports, module){
                //引入依赖模块(同步)
                var module2 = require('./module2')
                //引入依赖模块(异步)
                    require.async('./module3', function (m3) {
                    })
                //暴露模块
                exports.xxx = value
                })
                引入使用模块：

                define(function (require) {
                var m1 = require('./module1')
                var m4 = require('./module4')
                m1.show()
                m4.show()
                })
    4）ES6模块化：
         es6模块的设计思想是尽量的静态化， 使得编译时就能确定模块的关系， 以及输入输出关系
         commonjs和amd只有在运行时才能确定， 异步的

         语法规范：
             export命令用于规定模块的对外接口， import命令用于输入其他模块的功能
             编译时加载意味着 import不能和运行相关的内容放在一起，from后的内容要动态获取
             不能将import放在if等语句内

        es6和commonjs差异：
            两者的模块导入导出语法不同：commonjs是module.exports，exports导出，require导入；ES6则是export导出，import导入。
            commonjs是运行时加载模块，ES6是在静态编译期间就确定模块的依赖。
            ES6在编译期间会将所有import提升到顶部，commonjs不会提升require。
            commonjs导出的是一个值拷贝，会对加载结果进行缓存，一旦内部再修改这个值，则不会同步到外部。ES6是导出的一个引用，内部修改可以同步到外部。
            commonjs具有缓存
            commonjs中顶层的this指向这个模块本身，而ES6中顶层this指向undefined。
            CommonJs 是单个值导出，ES6 Module可以导出多个

    
    AMD 和 CMD 规范的区别？

第一个方面是在模块定义时对依赖的处理不同。AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块。
而 CMD 推崇就近依赖，只有在用到某个模块的时候再去 require。
第二个方面是对依赖模块的执行时机处理不同。首先 AMD 和 CMD 对于模块的加载方式都是异步加载，不过它们的区别在于模块的执行时机，
AMD 在依赖模块加载完成后就直接执行依赖模块，依赖模块的执行顺序和我们书写的顺序不一定一致。
而 CMD在依赖模块加载完成后并不执行，只是下载而已，遇到 require 语句的时候才执行对应的模块，这样模块的执行顺序就和我们书写的顺序保持一致了。
          
    
CommonJS规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。
AMD规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。
CMD规范与AMD规范很相似，都用于浏览器编程，依赖就近，延迟执行，可以很容易在Node.js中运行。不过，依赖SPM 打包，模块的加载逻辑偏重
ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。
                        
        