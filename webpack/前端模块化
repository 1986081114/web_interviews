模块： 
    将一个复杂的程序依据一定的规则封装成几个块，之后再组合在一起。
    块内部数据与实现是私有的， 只向外部暴露一些接口与外部通信。

模块化的进化过程：
   1）：全局function模式， 将不同的功能封装成不同的全局函数。
       问题： 污染了全局命名空间， 容易引起命名冲突或数据不安全， 而且模块之间看不出直接关系
   2）： namespace模式， 简单对象封装
      能减少全局变量， 解决命名冲突
      数据不安全， （外部能直接修改模块内部的数据），内部所有状态都被暴露
      let myModule = {
            data: 'www.baidu.com',
            foo() {
                console.log(`foo() ${this.data}`)
            },
            bar() {
                console.log(`bar() ${this.data}`)
            }
            }
      myModule.data = 'other data' //能直接修改模块内部的数据
      myModule.foo() // foo() other data

  3）：iife，匿名函数自调用（闭包）
        作用： 数据是私有的， 外部只能通过暴露的方法操作
        问题：当前模块不能依赖另一个模块
模块化好处：
    减少命名冲突
    更好的分离，按需加载， 更高复用性
    更好的维护性

引入多个script问题：
  请求过多： 如果依赖过多模块， 那样就会发送多个请求， 导致请求过多
  依赖模糊：
     不了解依赖间的关系， 不了解之间的顺序，如果顺序错了很容易出错
    难以维护：
      
模块化规范：
   1）：CommonJS:
        在服务器端：模块的加载是运行时同步加载的
        在浏览器端，模块需要提前编译打包；
        
         特点： 所有的代码都运行在模块作用域，不会污染全局
                模块可以多次加载，但只会在第一次加载时运行一次， 然后运行结果被缓存，
                     以后再加载，就直接读取缓存结果， 想要模块再次运行，必须清楚缓存
                模块加载的顺序，按照代码中出现的顺序。
                同步加载的，只有加载完，才能继续执行后续操作
                输入的值是被输出值的拷贝，也就是说，一旦输出这个值，模块内部变化就影响不到这个值
        语法：
            module.exports = value   exports.xxx = value
            require(文件路径),
          
           // example.js
            var x = 5;
            var addX = function (value) {
            return value + x;
            };
            module.exports.x = x;
            module.exports.addX = addX;

            var example = require('./example.js');//如果参数字符串以“./”开头，则表示加载的是一个位于相对路径
            console.log(example.x); // 5
            console.log(example.addX(1)); // 6

    2）AMD： 
        commonjs规范加载模块是同步的，也就是说只有加载完才能执行后面的操作，amd是非同步的。允许指定回调函数
           如果是浏览器环境， 要从服务端加载模块， 这是必须采取非同步的模式，因此浏览器一般采用amd模式

         语法规范：
         定义define方法，将代码定义为模块， 通过require方法加载
          <script data-main="js/main" src="js/libs/require.js"></script> 不是使用才加载
    3） CMD：
         cmd专门用于浏览器端， 模块加载是异步的， 模块使用时才加载，cmd规范整合了commonjs和amd规范的特点
            语法规范：
               //定义没有依赖的模块
                define(function(require, exports, module){
                exports.xxx = value
                module.exports = value
                })
                //定义有依赖的模块
                define(function(require, exports, module){
                //引入依赖模块(同步)
                var module2 = require('./module2')
                //引入依赖模块(异步)
                    require.async('./module3', function (m3) {
                    })
                //暴露模块
                exports.xxx = value
                })
                引入使用模块：

                define(function (require) {
                var m1 = require('./module1')
                var m4 = require('./module4')
                m1.show()
                m4.show()
                })
    4）ES6模块化：
         es6模块的设计思想是尽量的静态化， 使得编译时就能确定模块的关系， 以及输入输出关系
         commonjs和amd只有在运行时才能确定， 

         语法规范：
             export命令用于规定模块的对外接口， import命令用于输入其他模块的功能

        es6和commonjs差异：
           commonjs模块输出的是值的拷贝， es6模块输出的是值的引用
           commonjs模块是运行时加载， es6模块是编译时输出接口
             这是因为commonjs加载的是一个对象（module.export属性），该对象只有在脚本运行完才能生成。
             es6模块不是对象， 他的接口只是一种静态定义， 再代码静态解析阶段才会生成。
    
CommonJS规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。
AMD规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。
CMD规范与AMD规范很相似，都用于浏览器编程，依赖就近，延迟执行，可以很容易在Node.js中运行。不过，依赖SPM 打包，模块的加载逻辑偏重
ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。
                        
        