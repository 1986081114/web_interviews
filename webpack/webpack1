1.webpack作用：
  模块打包， 编译兼容 能力扩展

2.核心概念：
  入口entry
       1.string----》 './src/index.js'  单入口，形成一个chunk， 输出一个bundle文件 默认名叫main
       2.array-----》 ['./src/index.js' , './src/add.js'] 多入口， 所有入口文件最终形成一个chunk，只输出一个bundle，一般在hmr使用
       3.object ---- 多入口，多出口

            有几个输入就有几个输出，输出的名字是key：
             {
                  add：'./src/add.js',
                  //单入口多入口混合
                  index: [........]
             }
  出口output：
       filename: 'js/[name].js' //文件名称， （指定目录+ 名称 如 js/就是添加一个js文件包裹）
       path： resolve(__dirname, 'build‘)  // 输出文件目录， （所有文件输出的公共目录）
       publicPath： './' //所有资源引入公共路径的前缀， --（imgs/a.jpg ---> ./imgs/a.jpg)
       chunkFilename: 'js/[name]_chunk.js', //非入口chunk名称
       library：'[name]' //整个库向外暴露的变量名
       libraryTarget： ‘window' //变量名添加到browser，   
       libraryTarget： ‘global' //变量名添加到node，    
       libraryTarget： ‘commonjs' //变量名添加到node，    
  loader：
       module:{
          ruler:[
             {
                test: 
                use:[]或者loader：单个loader
                exclude: //排除某些文件
                include： //只检查某些文件
                enforce：pre 优先执行 post：延后执行
                options:{}
             }

          ]
       }
  插件plugin :
      
  模式mode

  resolve:解析模块规则
    webpack 再启动后会从配置的入口文件出发寻找所有的依赖， resolve配置webpack如何寻找模块对应的文件。默认会采用模块化的标准约定好的规则去寻找，
      但是可以通过resolve修改默认规则。
      { 
          //创建别名, 优点是简写路径，缺点是没有提示
         alias：{
            //非精确匹配
            css: resolve(__dirname, 'src/css')  这样就可以 import css from "css/html.css'
            //在对象的键值末尾添加$表示精确匹配
            xyz$: path.resolve(__dirname, 'path/to/file.js'),
              import Test1 from 'xyz'; // 精确匹配，所以 path/to/file.js 被解析和导入
             import Test2 from 'xyz/file.js'; // 非精确匹配，触发普通解析
         },
         //省略文件路径后缀名,按照顺序解析这些后缀名， 如果文件名字相同， 但后缀不同， webpack会解析在前面的
         extensions: {'.js','.json','.css'}，
         //告诉webpack解析时去搜索哪个目录
         modules：['node_modules']
      }
      
   devServe:{
      //运行带码的目录
      contentBase: resolve(__dirname, 'build’)
      //监视contnetBase目录下的所有文件， 一旦文件变化， 就会reload
      watchContentBase：true；
      //启动gzip压缩
      compress： true，
      //端口号
      port：5000,
      //域名
      host: 'localhost',
      //自动打开浏览器
      open: true,
      //开启hmr功能
      hot: true;
      //除了基本启动信息，其他内容不再提示
      quiet: true, 
      //代理服务器 跨域
      proxy:{
         //
          
      }
   }
   optimization： {

   }

3.webpack打包流程：
    1.读取webpack配置和命令行参数，生成最终的配置
    2.开始编译，利用第一步的参数初始化compiler对象， 加载所有的配置插件，执行对象的run方法家属编译
    3.根据entry确定入口
    4.编译模块： 从入口文件出发，调用所有配置的loader对模块进行翻译，再找出该模块依赖的模块，递归直到所有文件都经过处理
    5.完成模块编译：经过第四步使用的loader翻译完所有的模块后，得到了每个模块被翻译后的最终内容和它们之间的关系
    6.输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，
    7.输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。

 4.plugin和loader区别：
     loader：直译加载器，webpack原生只能解析js文件， loader的作用就是让webpack拥有加载和解析非js文件的能力。
          loader在module.rules中配置，也就是说他作为模块的解析规则而存在，类型为数组
        
     plugin：直译插件，扩展webpack的功能，让webppack更具有灵活性，在webpack运行生命周期中会广播很多事， Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。 
      从打包优化和压缩，到重新定义环境变量
             plugin在plugins单独配置，类型为数组，每一项是一个plugin的实例，需要导入require和new
      区别：

      对loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的文件转换过程 
          在module.relus中配置，模块解析规则，类型是数组， 每一项都是一个object， 
      plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，
       会监听webpack打包过程中的某些节点，执行广泛的任务
        在plugin单独配置，类型是数组，每一项都是一个plugin实例， 参数通过构造函数传入

5.常见的loader：
   json-loader:加载json文件
   babel-loader：将es6转成es5；
   ts-loader：将ts转成js
   sass-loader： scss/sass转成css；
   css-loader：加载css， 支持模块化
   style-loader： 把css代码注入到js通过dom操作区加载css；
   eslint-loader： 通过eslint检查代码
   cache-loader: 可以将一些花销比较大的loader之前添加，目的将结果缓存
   file-loader： 把文件输入到一个文件夹，在代码中通过对应的url去指引输出的文件
   url-loader： 与file-loader类似，区别是可以设置阈值，可以以base64的方式把文件内容注入到代码
   image-loader：加载并压缩图片
   vue-loader

6.常见的plugin：
   uglifyjs-webpack-plugin：通过uglifyes压缩es6代码
   html-webpack-plugin： 简化html文件创建
   ignore-plugin： 忽略部分文件
   web-webpack-plugin：方便地为单页面输出html
   mini-css-extract-plugin： 分离样式文件， css提取为独立文件，支持按需加载，如果使用这个在loader里要把style-loader换成mini-css-extract-plugin.loader，
7.webpack模块热更新
   hot module replacement（HMR）；
     这个机制可以做到不用刷新浏览器而将新变换的模块替换掉旧的模块。
     wds和浏览器之间维护了一个websocket，当本地资源发生变化， wds会向浏览器推送更新， 并带上构建时的hash， 让客户端与上一次进行对比，
     客户端对比出差异后会向 WDS（webpack-dev-server） 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该chunk的增量更新 
  后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，
   像react-hot-loader 和 vue-loader 都是借助这些 API 实现 HMR。


8.source map是什么？
source map 是将编译打包压缩后的代码映射到源代码的过程。打包后的代码不具有良好的可读性， 想要调试需要source map。

9.如何优化 Webpack 的构建速度？：

   代码压缩： 
       多进程并行压缩： webpack-paralle-uglify-plugin
       通过mini-css-extract-plugin提取chunk中css代码到单独文件
    图片压缩： 
         image-wepack-loader

    缩小打包作用域：
        exclude/include：确定loader规则范围
        resolve.modules指明第三方模块的绝对路径
    提取页面公共资源：
        使用html-webpack-externals-plugin：将基础包通过cdn引入，不打入bundle里面。
    充分利用缓存提升第二次构建速度：
         babel-loader：开启缓存
    tree-shaking：
         打包过程中检测工程中没有引入使用过的模块并进行标记， 在资源压缩时将他们从最终的bundle中去掉。
    scope hoisting：
      构建后的代码存在大量的闭包， 造成体积增大，运行代码时创建的函数作用域变多，scope hoisting将所有模块的代码按照顺序放在一个函数作用域里，
      然后适当重命名防止命名冲突。

    动态polyfill：


10.url-loader和 html-loader：
         url-loader默认使用es6模块化解析，html-loader使用commonjs
                      出现问题[object Module]
                      关闭url-loader的es6的模块化解析使用comminjs
11.开发模式和生产模式区别：

12.webpack和grunt，gulp不通过：
    三者都是前端构建工具，  
     grunt/gulp的核心是task（任务流）置一系列task，并且定义task要处理的事务，
     之后让grunt/gulp依次执行task，让整个流程自动化，所以grunt/gulp也称为前端自动化任务管理工具
     如果前端模块非常简单， 或者没有用到模块化概念， 只需要进行简单的合并，压缩， 就是用grunt/gulp可以， 
     但如果整个项目使用模块化管理， 依赖性非常强， 就要使用更强大的webpack
     grunp/gulp更加强调的是前端任务流程的自动化，模块化不是核心，找到一个文件，对其进行一系列操作， 多个任务就构成了构建流程。
     webpack更加强调模块化开发， 而文件压缩， 预处理， 等是附加功能。
     webapck会自动递归接卸入口所需的所有资源文件， 用不同的loader处理不同的文件，plugin扩展功能
    
            
  
    

  

  