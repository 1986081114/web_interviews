异步加载代码
 require.ensure
 会把引入的文件单独打包成不同的包，定义一个全局函数webpackJson，打包好的文件都是webpackJson这种形式
 ，包含了chunk的id1和cunk name的映射关系，需要加载响应的chunk时，就通过生成script变迁，然后插入到dom中完成chunk的加载

上述是webpack1.x方法， 处理过程比较粗糙， 如果出现chunk'加载不成功怎么办？

在wbapck2中相比于webpack1.x 在处理上将chunk的加载包裹在promise当中，,如果chunk加载超时或者失败会抛出错误，这时我们可以针对抛出的错误做相应的错误处理。


import按需加载：
   import接收引用包的地址， 并且使用promise的回调，获取加载的包， 在代码中所有被import的模块
   都会被单打打包成一个包
   
   
webpack分包：
   默认条件下会根据entry内的入口打包，入口内引入的模块被打包成一个chunk，其实当模式是production 默认被指就是splitchunk async
     （a,b都引入jquery，会被打包两次，但是使用了splitchunk，会分析多入口是否引用公共文件，如果是引用了，就单独打包一次，不会多次打包）
   当模块不是静态引入， 而是被动态引入， 会被分割成一个单独的chunk
   配置splitChunk：
      a,b都引入jquery，会被打包两次，但是使用了splitchunk，会分析多入口是否引用公共文件，如果是引用了，就单独打包一次，不会多次打包）
      会打包node-module成一个单独的包
      
      有三个可选值：initial(初始块)、async(按需加载块)、all(全部块)，默认为async   

    minSize: 表示在压缩前的最小模块大小，默认为30000
    minChunks: 表示被引用次数，默认为1
    maxAsyncRequests: 按需加载时候最大的并行请求数，默认为5
    maxInitialRequests: 一个入口最大的并行请求数，默认为3
    automaticNameDelimiter: 命名连接符
    name: 拆分出来块的名字，默认由块名和hash值自动生成
    cacheGroups: 缓存组。缓存组的属性除上面所有属性外，还有test, priority, reuseExistingChunk

    test: 用于控制哪些模块被这个缓存组匹配到
    priority: 缓存组打包的先后优先级
    reuseExistingChunk: 如果当前代码块包含的模块已经有了，就不在产生一个新的代码块

    initial, all模式会将所有来自node_modules的模块分配到一个叫vendors的缓存组；所有重复引用至少两次的代码，会被分配到default的缓存组。
    到initial模式下会分开优化打包异步和非异步模块。而all会把异步和非异步同时进行优化打包。也就是说moduleA在indexA中异步引入，
    indexB中同步引入，initial下moduleA会出现在两个打包块中，而all只会出现一个。

     cacheGroups:{ // 这里开始设置缓存的 chunks


