什么是babel：
    babel是一个js编译器， 他把最新版的js编译成当下可以执行的版本， 简言之就是利用babel就可以让我们在当前项目随意使用这些最新的es5语法

    babel解析：
      分为三步：
         .Parser（解析）：此过程接收转换之前的源码， 输出ast（抽象语法树），在babel中负责的包是babel/Parser
         .Transform（转换）：此过程接收parser输出的ast（抽象语法树），输出转换后的ast，负责的包是babel/traverse
         .generage：（生成）：接收transform输出的ast，输出（深度优先遍历）转换后的源码， 负责的包是babel/generator。

         .Parser: code - token-ast

         transform：
               这一步做的事情就是操作ast，将es6的ast操作js转换成es5的ast。
               babel有很多插件，如果插件自己去遍历ast，进行操作，维护关系，太低效。所以采用访问者模式
               转换器会遍历ast找出自己感兴趣的节点类型， 采用访问者模式， 由这个访问者来：
                 进行统一的遍历操
                 提供节点操作方法
                 维护结点间的关系
                 插件只需要维护自己感兴趣的类型， 当访问者访问到对应节点，就去访问插件

         
        parser：  包含两个步骤：
          词法解析---词法解析器，将字符串转成token，token可以视为一些语法片段组成的数组，
          语法分析： 


AST:
  抽象语法树，是源代码的抽象语法结构的树状表现形式。树上的每个节点表示源代码中的一种结构
   
  作用：
     编译器错误提示，代码格式化
     elint对代码错误检查
     webpakc通过babel转译js语法
    
 解释执行第一步读取js文件中的字符流， 然后通过分析生成token， 之后在通过语法分析parser生成ast；

 整个ast解析阶段分为两个阶段：
    .分词： 将整个代码字符串分割成语法单元数组
    语法分析： 建立分析语法单元之间的关系。 就是将得到的词汇进行一个立体的组合，确定词语的关系
  

了解了AST之后，我们再分析一下JS的代码压缩原理。简单的说，就是

    1. 将code转换成AST
    2. 将AST进行优化，生成一个更小的AST
    3. 将新生成的AST再转化成code


  babel：架构：
    babel和webpack为了适应复杂的定制需求和频繁的功能变化， 都使用了微内核架构风格，也就是说他们的核心非常小，大部分功能都是通过插件实现。

    babel和webpack区别：
      babel： js新语法的编译工具， 不关心模块化
      webpack： 打包构建的工具， 是多个loader plugin的集合

   
