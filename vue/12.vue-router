
后端渲染阶段：浏览器请求网页，发送地址给服务器， 服务器把网页渲染好，返回给前端， 服务器中包含html + css + java（java作用是从数据库请求数据动态放在页面中）
         没有ajax请求， 返回给前端后，前端只有html + css，如果在返回的网页内又点击了一个链接， 服务器又重现渲染网页返回给浏览器
         此时页面和链接形成了映射关系， 保存在后端， 
         后端处理url和页面映射关系叫后端路由 ，
         在后端渲染好页面，不需要加载任何js和css，直接交给浏览器， 有利于seo优化
         缺点：
             整个页面的模块都有后端人员来编写维护的，如果前端人员开发网页，需要通过php或者java等语言编写后端代码
             通常情况下html代码和数据以及对应的逻辑混合在一起，编写和维护非常麻烦。

前后端分离阶段：
      后端只负责提供数据，不负责任何阶段的内容，
      浏览器输入url，去静态服务器获取html css js，js代码浏览器执行， ajax在浏览器执行向提供api接口的服务器获取数据， 获取数据再通过js代码渲染数据，
      这也是前端渲染： 浏览器中显示的内容大部分都是由前端写的js代码在浏览器执行，最终渲染出网页。
       最大的优势，前后端责任清晰， 后端专注于数据，前端专注于渲染，
                  并且安卓端也可以使用后端提供的api，后端不用做任何处理，

单页面富应用asp：
   整个网页只有一个html页面， 在静态服务器，只有一套html+css+js（前后端分类可能有好几套url与页面的映射），但是js中可能也会有几套映射操作，
    前端路由里包含着一个url映射一个组件，地址改变整个页面不刷新， 只更改部分内容。
    spa最大的特点是在前后端分离的基础上加了一层前端路由， 管理url和组件的关系。
 优点：

用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；
基于上面一点，SPA 相对对服务器压力小；
前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；

前端路由：
    1.改变url但页面不要强制刷新，（禁止a默认行为）
           通过url中的hash改变url
           通过html5中的history模式改变url；
    2.自己监听url变化，改变之后自己更新页面内容。

缺点：

初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；
前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；
SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。

vuerouter种路由模式的说明如下：

更新视图但不重新请求页面是前端路由原理的核心之一

hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；

history : 依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；

abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.

hash模式：在浏览器会出现 符号# #以及后面跟着的字符都被称为hash，
      可以改变URL，但不会触发页面重新加载 所以这种模式不利于 SEO 优化
      只能修改  #  后面的部分，因此只能跳转与当前 URL 同文档的 URL
      通过  window.onhashchange  监听  hash  的改变，借此实现无刷新跳转的功能。
      hash 值得改变会在浏览器的历史记增加访问记录，所以可以通过浏览器的回退、前进控制 hash 值的改变。
      路由的hash模式 利用window可以监听onhashchange事件来实现，也就是说hash值是用来指导浏览器动作的
      对服务器没有影响，没改变一次hash值都会在浏览器访问历史中增加一个记录，
     。


history模式： history采用html的新特性， 完成URL 跳转而无须重新加载页面
        history  模式是通过调用  window.history  对象上的一系列方法来实现页面的无刷新跳转。   
        通过pushState、replaceState实现无刷新跳转的功能。
   hash模式url里面永远带着#号，开发当中默认使用这个模式。如果用户考虑url的规范那么就需要使用history模式，
   因为history模式没有#号，是个正常的url，适合推广宣传；
   路径直接拼接在端口号后面，后面的路径也会随着http请求发给服务器，因此前端的URL必须和向发送请求后端URL保持一致，否则会报404错误。

   功能上：比如我们在开发app的时候有分享页面，那么这个分享出去的页面就是用vue或是react做的，
   咱们把这个页面分享到第三方的app里，有的app里面url是不允许带有#号的，所以要将#号去除那么就要使用history模式，
  
生产环境问题：
   因为history模式 路径会随着http请求发送给服务器，项目打包部署时，需要后端配置nginx，当应用通过router跳转到某个页面后
   因为此时是前端路由控制页面跳转，虽然url改变但是只是页面内容发生改变并没有重新发送请求，但是当前页面刷新下，就会重新发起请求
   如果当前nginx没有匹配到当前URL，就会404

   但是hash模式不会出现，因为hash虽然改变了url但是不会包括在http请求中，所以对于请求来讲，页面路径还是之前的路径，nginx不会拦截

   那为什么开发环境时就不会出现404呢？ 因为在 vue-cli  中  webpack  帮我们做了处理


 this.$router和this.$route区别：
  router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如history对象。。
     。经常用的跳转链接就可以用this.$router.push，和router-link跳转一样。。。
  route相当于当前正在跳转的路由对象。。可以从里面获取name,path,params,query等
    
query和params区别：
   query是path和name来引用， params只能用name引用，在path会被忽略 分别是this.$route.query.name , this.$route.params.name
   url地址显示， query在url显示， params不显示
   query刷新不会丢失query里面的数据 params刷新 会 丢失 params里面的数据。
   params传参，push里面只能是 name:‘xxx’,不能是path:‘/xxx’,因为params只能用name来引入路由，如果这里写成了path，接收参数页面会是undefined！！！

router-link-active

动态路由：
  /user/: id;
  v-bind: to = " 'user/' + userId"   //router-link  userId是data里面的数据
  
路由懒加载：
    路由懒加载的含义：把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件
    vue-router实现路由懒加载（ 动态加载路由 ）
      答:三种方式
       第一种： vue异步组件技术 ==== 异步加载，vue-router配置路由 , 使用vue的异步组件技术 , 可以实现按需加载 .但是,这种情况下一个组件生成一个js文件。
       第二种： 路由懒加载(使用import)。
       第三种： webpack提供的require.ensure()，vue-router配置路由，使用webpack的require.ensure技术，也可以实现按需加载。
             这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件。
            //路由懒加载
            function load(component) {
               return () => import(`views/${component}`)
            }
            // 路由配置
            const router = new Router({
               routes: [
                  {
                        path: '/',
                        name: 'home',
                        component: load('Home'),
                  },
               ]



路由传参：       this.$router.query,
              /home/:abc  取值，this.$router.params.abc
Vue-router 导航守卫有哪些

全局前置/钩子：beforeEach、beforeResolve、afterEach
路由独享的守卫：beforeEnter
组件内的守卫：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave
当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 等待中。
router.beforeResolve 注册一个全局守卫。这和 router.beforeEach 类似，区别是在导航被确认之前，
同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。


vue初始化页面闪动问题答：使用vue开发时，在vue初始化之前，由于 div 是不归 vue 管的，
所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于 {{message}} 的字样，虽然一般情况下这个时间很短暂，
但是我们还是有必要让解决这个问题的。首先：在css里加上 [v-cloak] { display: none; } 。如果没有彻底解决问题，
则在根元素加上 style="display: none;" :style="{display:  block }"


选中样式： 
   1.在new VueRouter({
      linkActiveClass: 'active'
   })

   2.在router-link active-class = ’active‘


 完整的导航解析流程:

   导航被触发。
   在失活的组件里调用 beforeRouteLeave 守卫。
   调用全局的 beforeEach 守卫。
   在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。
   在路由配置里调用 beforeEnter。
   解析异步路由组件。
   在被激活的组件里调用 beforeRouteEnter。
   调用全局的 beforeResolve 守卫 (2.5+)。
   导航被确认。
   调用全局的 afterEach 钩子。
   触发 DOM 更新。
   调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。



    