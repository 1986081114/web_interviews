1.控件和数据自动绑定，
  可以直接使用data里面的数据提交表单， 而不需要document那一套获取控件的值，对控件的赋值也很方便，
2.页面参数传值和状态管理
   页面传值相比于vue来说， 可选方案比较多， props vuex全局状态管理等，原生开发页面参数多，页面传值会复杂
3.组件化化开发，无刷新保留场景参数更新。
  可以复用一些组件，引用子组件， 当子组件内容更新， 
4.前端路由技术
  可以抛弃js原生的iframe
5.虚拟dom
    避免dom的操作浪费
6.解耦视图和数据
  使得数据更改更为容易， 不需要逻辑代码的修改， 只需要直接操作数据就能完成相关操作。
7.各个组件中的样式不冲突：
   各组件间可以使用相同的类名， 但不互相影响
  

所有的框架其实都有共同的特点和目标，就是基于原生，然后更高的效率，更棒的性能，更好的差异抹平
然而并不意味着框架的指标就优秀于原生，而是说有了框架，我们不用在手写视图-数据的绑定了，不用再手动抹平平台或浏览器之间的差异了，
不用再陷入操作dom的同时还要兼顾性能的苦恼了，可以说框架提高了开发者开发和实现功能的各项下限，让快速开发和基础性能达到更好的平衡。

框架带来的优势并不是凭空而来， 框架的实现都需要js语法以及浏览器的原生支持，因为web应用最终都要运行在宿主浏览器上的，所以制定规范的
各大浏览器厂商以及提供的api支持的浏览器才是最终的王道，而框架不是，之所以引入各类框架，工具库去实现各类优秀的设计和思想，根本原因
是原生未直接提供对应的方式或api。所以框架相对于原生也有缺点：

   性能的下降，
   框架环境的隔离，例如 vue 的组件库没办法很好的衔接在 react 的项目中(也许你会说 vuera 或微前端，但事实上 ROI 和性能并不好，开发和维护的成本较高)。