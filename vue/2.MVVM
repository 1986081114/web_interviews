view层： 视图层，通常是dom展示用户的各种信息
model： 数据层，
viewModel：
   视图模型层，时view和model沟通的桥梁，
   一方面实现了data Binding， 数据绑定，将model的改变试试反映到view中，
   另一方面实现了DOM Listerner， dom监听， 当dom发生一些事件，可以监听并改变对应的data

MVC模型的意思是卖软件而可以分为三部分 试图view， 控制器controller， 模型model。
            view传指令到controller， 
            controller完成业务逻辑之后， 要求model改变状态，
            model将新的数据发送到view，用户得到反馈
        所有都是单向的
    优点： 
       低耦合性，重用性高， 可维护性高， 
    缺点：
      没有明确的定义，完全理解mvc并不容易， 使用mvc需要精心的计划， 模型和试图完全分离。
      不适合小型，中等规模的应用程序， 
     视图与控制器间过于紧密连接，视图与控制器是相互分离，但却是联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。
     试图对模型数据的低效率访问，依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。
MVP：
   model-view-presenter：
       ，各部分连接是双向的，
        view和model不连接，通过presenter传递。
    优点：  
       试图和模型完全分离， 修改试图不影响模型。
       可以更高效的使用模型， 因为所有交互都在presenter内部。
       可以将一个oresenter用于多个视图， 而不需要改变presenter逻辑， 因为视图的变化比
       模型的变化更频繁。
    缺点： 试图和presenter监护会过于频繁， 只有试图变化，presenter就会变化。
    适用于 android。

MVVM：
   model-view-viewModel；

     viewModel和view双向绑定， view变化自动反映到viewModel，
     它借鉴了mvc思想，在前端页面把model用纯js对象表示， view负责显示，两者做到了最大限度的分离
      mvvm设计思想就是，赶猪model的变化， 让mvvm自动更新dom状态， 从而把开发者从操作dom繁琐步骤脱离出来。
     视图模型

  视图模型是暴露公共属性和命令的视图的抽象。MVVM没有MVC模式的控制器，也没有MVP模式的presenter，有的是一个绑定器。
   在视图模型中，绑定器在视图和数据绑定器之间进行通信。 

   优点：  低耦合， 可重用， 独立开发，可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写