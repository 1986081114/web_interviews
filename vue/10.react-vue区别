相同点：
   都支持组件化
   都是数据驱动试图
   都使用了虚拟dom，（一个映射真是dom的js对象）

不同点：
    1.react中，当组件的状态发生变化时，他回会以该组件为根，重现渲染整个整个组件子树。
       而在vue中，在getter实现依赖收集，组建的依赖是在渲染的过程中自动追踪的，系统能准确知道那个组件确实需要重新渲染。
    2.虚拟DOM的处理方式不同。Vue中的虚拟DOM控制了颗粒度，组件层面走watcher通知，而组件内部走vdom做diff，
      这样，既不会有太多watcher，也不会让vdom的规模过大。而React走了类似于CPU调度的逻辑，把vdom这棵树，
      微观上变成了链表，然后利用浏览器的空闲时间来做diff

    3.：vue的整体思想仍然是拥抱经典的html(结构)+css(表现)+js(行为)的形式，vue鼓励开发者使用template模板，
         react，组件使用jsx语法，all in js，将html与css全都融入javaScript，jsx语法相对来说更加灵活，
    4. vue是声明式编程， react是函数式编程
      声明式编程是以数据结构的形式来表达程序执行的逻辑。它的主要思想是告诉计算机应该做什么，但不指定具体要怎么做。
      函数式编程和声明式编程是有所关联的，因为他们思想是一致的：即只关注做什么而不是怎么做。但函数式编程不仅仅局限于声明式编程。
       函数式编程最重要的特点是“函数第一位”，即函数可以出现在任何地方，比如你可以把函数作为参数传递给另一个函数，不仅如此你还可以将函数作为返回值。



vue react数据监测的不同：
    现代前端框架有两种检测方式 pull和push 
    pull为代表的是react， 在react更改数据是通过setState显示更新，然后react经过一层层的操作找出差异，然后patch到dom上， 意味着react
    一开始是不知道那里发生了变化，只知道有了变化，然后去查找变化

     当vue程序初始化的时候会对data数据进行依赖收集， 一旦数据发生变化， 响应式系统就会立即得知
    那里发生了变化，如果给一个数据就绑定一个watcher，一旦绑定细粒度过高，就会产生大量的watcher， 这会内存带来大量开销
    而细粒度过低又无法精确检测数据的变化， 所以vue采用了一个折中的方案，在组件级别使用push'检测方式也就是响应式系统
    通常会在第一时间检测到发生变化的组件， 然后再组件内进行虚拟dom获取更具体的差异， 而虚拟dom则是pullink标签，
    所以vue是 push + pull结合的方式进行检测。
       
        
 
