相同点：
   都支持组件化
   都是数据驱动试图
   都使用了虚拟dom，（一个映射真是dom的js对象）
   
   react 用于构建用户界面的 JavaScript 库
   vue 渐进式js框架

不同点：
    1.react中，当组件的状态发生变化时，他回会以该组件为根，重现渲染整个整个组件子树。
       而在vue中，在getter实现依赖收集，组建的依赖是在渲染的过程中自动追踪的，系统能准确知道那个组件确实需要重新渲染。
    2.虚拟DOM的处理方式不同。Vue中的虚拟DOM控制了颗粒度，组件层面走watcher通知，而组件内部走vdom做diff，
      这样，既不会有太多watcher，也不会让vdom的规模过大。而React走了类似于CPU调度的逻辑，把vdom这棵树，
      微观上变成了链表，然后利用浏览器的空闲时间来做diff

    3.：vue的整体思想仍然是拥抱经典的html(结构)+css(表现)+js(行为)的形式，vue鼓励开发者使用template模板，
         react，组件使用jsx语法，all in js，将html与css全都融入javaScript，jsx语法相对来说更加灵活，
    4. vue是声明式编程， react是函数式编程
      声明式编程是以数据结构的形式来表达程序执行的逻辑。它的主要思想是告诉计算机应该做什么，但不指定具体要怎么做。
      函数式编程和声明式编程是有所关联的，因为他们思想是一致的：即只关注做什么而不是怎么做。但函数式编程不仅仅局限于声明式编程。
       函数式编程最重要的特点是“函数第一位”，即函数可以出现在任何地方，比如你可以把函数作为参数传递给另一个函数，不仅如此你还可以将函数作为返回值。



vue react数据监测的不同：
    现代前端框架有两种检测方式 pull和push 
    pull为代表的是react， 在react更改数据是通过setState显示更新，然后react经过一层层的操作找出差异，然后patch到dom上， 意味着react
    一开始是不知道那里发生了变化，只知道有了变化，然后去查找变化

     当vue程序初始化的时候会对data数据进行依赖收集， 一旦数据发生变化， 响应式系统就会立即得知
    那里发生了变化，如果给一个数据就绑定一个watcher，一旦绑定细粒度过高，就会产生大量的watcher， 这会内存带来大量开销
    而细粒度过低又无法精确检测数据的变化， 所以vue采用了一个折中的方案，在组件级别使用push'检测方式也就是响应式系统
    通常会在第一时间检测到发生变化的组件， 然后再组件内进行虚拟dom获取更具体的差异， 而虚拟dom则是pullink标签，
    所以vue是 push + pull结合的方式进行检测。

    

框架名称                            特点                                                      缺点

react                1, 自上而下的设计,拥抱经典的html(结构)+css                      当你用一个简单的概念去解决一个复杂的问题时需要更多的研究，因为文档是不会告诉你框架的每个组成
                        (表现)+js(行为)的形式，更接近原生的设计                       会对应什么样解决方案，需要自己研究。
                     2. 更灵活, 因为框架提供了更原生的处理，所以可以
                        构建任意复杂的系统
                     3. 小的职责范围让团队拥有更小的维护层面
        
 
angular              1. 自上而下的设计, 在设计之初就需要考虑用户可能遇到的问题                1.学习成本会更高， 因为框架的责任重大，编写考虑的东西和设计的点就很多，所以需要了解学习更多
                        然后将它们放在一起处理                                           2. 当内置方法不是当前案例的最好的解决方案时，就会很尴尬，可能找不到一个替换方案
                     2. 可以用一些抽象的概念去解决问题, 而不用做更多的研究，因为               3. 因为这类框架要保持高度一致性所以要引入底层新想法的难度更高
                       设计者已经提你做了
                     3. 集中设计保证了框架与解决方案的一致性，所以看文档就可以完成开发。         


vue                  1. 职责范围处于二者之间，致力于更低的学习门槛，                            平衡，中庸的选择，意味着上述两个框架的缺陷都会一定程度上的涉及，比如相对
                        希望开发者能更专注于开发，而不是在开发前学习更多用不到的知识              react较高的框架学习成本等


职责范围的意义：
   大的职责范围让开发者习惯把问题抛给框架，
   小的职责范围让开发者习惯把问题抛给社区