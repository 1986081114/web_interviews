vue2缺点：
   1.随着功能的增长， 需求的增加， 复杂组件的代码越来越难以维护， 虽然vue2也有逻辑复用的方法， 但是也存在一些弊端
       如mixin，特别容易发生命名冲突，暴露意图不明显，等
   2.vue2对于ts的支持非常有限。
   3.objectproperty的缺点无法检测数组的变化， 无法监听属性的添加

vue3的优点：
   vue3支持vue2的大多数特性，实现对vue2的兼容
   vue3对比vue2具有明显的性能提升
      打包大小减少41%
      初次渲染快55%，更新快133%
      内存使用减少54%
   vue3具有的组合式（composition） API实现逻辑模块化和重用
   增加了新特性，如Teleport组件，全局API的修改和优化等

选项式API： 包含多哥选项的对象来描述组件的逻辑，如 data， methods mounted 
  <script>
      export default {
      data() {
         return {
            count: 0
         }
      },
      methods: {
         increment() {
            this.count++
         }
      },
      mounted() {
         console.log(`The initial count is ${this.count}.`)
      }
      }
</script>  

组合式（composition）： 通过导入的api函数来描述组件的逻辑， 与 <script setup> 搭配使用.
   <script setup>
   import { ref, onMounted } from 'vue'
   const count = ref(0)
   // 用来修改状态、触发更新的函数
   function increment() {
      count.value++
   }
   // 生命周期钩子
   onMounted(() => {
      console.log(`The initial count is ${count.value}.`)
   })
   </script>
   选项式 API 以“组件实例”的概念为中心 (即上述例子中的 this)，对于有面向对象语言背景的用户来说，
      这通常与基于类的心智模型更为一致。同时，它将响应性相关的细节抽象出来，并强制按照选项来组织代码，从而对初学者而言更为友好。

   组合式 API 的核心思想是直接在函数作用域内定义响应式状态变量，并将从多个函数中得到的状态组合起来处理复杂问题。
      这种形式更加自由，也需要你对 Vue 的响应式系统有更深的理解才能高效使用。相应的，它的灵活性也使得组织和重用逻辑的模式变得更加强大。


不同： 
    响应式原理不同：
      vue2实现双向绑定通过objectdefineproperty，根据具体的key去读取和修改。其中的setter方法来实现数据劫持的，
      getter实现数据的修改。但是必须先知道想要拦截和修改的key是什么，所以vue2对于新增的属性无能为力，比如无法监听属性的添加和删除、
      数组索引和长度的变更，vue2的解决方法是使用Vue.set(object, propertyName, value) 等方法向嵌套对象添加响应式。

      Vue3.x使用了ES2015的更快的原生proxy 替代 Object.defineProperty。Proxy可以理解成，在对象之前架设一层“拦截”，
      外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy可以直接监听对象而非属性，
      并返回一个新对象，具有更好的响应式支持

   生命周期不同：
      beforeCreate -> 请使用 setup()
      created -> 请使用 setup()
      beforeMount -> onBeforeMount
      mounted -> onMounted
      beforeUpdate -> onBeforeUpdate
      updated -> onUpdated
      beforeDestroy -> onBeforeUnmount
      destroyed -> onUnmounted
      errorCaptured -> onErrorCaptured
      使用生命周期vue2可以直接使用而vue3需要引用，所以vue3打包压缩体积更小

   全局api优化：
       在 Vue3 中，全局和内部 API 都经过了重构，并考虑到了 tree-shaking 的支持。因此，
       全局 API现在只能作为 ES 模块构建的命名导出进行访问。

    Fragment（碎片）:
      原本在vue2在template只能允许有一个根节点， 但是在vue3中他允许可以有多个， 因为这些内容最后都变成一个碎片

    Component API：
       更加推荐使用component api来写api，最大好处就是逻辑重用， 方便把一些功能部分抽离出来， 另一方卖弄
       相对于opation来说更加集中



Object.defineProperty() 的问题主要有三个：

   不能监听数组的变化
   必须遍历对象的每个属性
   必须深层遍历嵌套的对象
   Proxy 在 ES2015 规范中被正式加入，它有以下几个特点

   针对对象：针对整个对象，而不是对象的某个属性，所以也就不需要对 keys 进行遍历。这解决了上述 Object.defineProperty() 第二个问题
   支持数组：Proxy 不需要对数组的方法进行重载，省去了众多 hack，减少代码量等于减少了维护成本，而且标准的就是最好的。
   除了上述两点之外，Proxy 还拥有以下优势：

   Proxy 的第二个参数可以有 13 种拦截方法，这比起 Object.defineProperty() 要更加丰富
   Proxy 作为新标准受到浏览器厂商的重点关注和性能优化，相比之下 Object.defineProperty() 是一个已有的老方法。


为什么使用ref，而不是简单的变量：
   在模板中使用ref船检并改变这个值时， vue会自动检测到变化，并相应的更新dom,这是通过一个基于依赖追踪的响应式系统实现的
   另一个 ref 的好处是，与普通变量不同，你可以将 ref 传递给函数，同时保留对最新值和响应式连接的访问。当将复杂的逻辑重构为可重用的代码时，这将非常有用。

watch和watchEffect区别：
   一种功能的两种形态
   watch监听： 如果想要第一次绑定就执行函数需要用immediate:true 
     watch(name, (curname, prename) => {})
     watch(() => obj.name, (curname, prename)=>{}) 监听对象
     watch([() => obj1.name, () => obj2.name], ([curname1, prename1], [curanma2, prename2]) => {})  监听多个

   watchEffect监听： 自动式跟踪响应式依赖
      watchEffect(() => { console.log(objName.name)});  不需要传递监听内容，自动依赖
      必须是同步创建的，  
      watchEffect(() => {}) 如果啥也不做，会自动停止

      const unwatch = watchEffect(() => {})
      // ...当该侦听器不再需要时, 手动停止
      unwatch()

     watch有惰性，数值再次改变才执行监听函数， watchEffect立即执行，没有惰性
     watch可以监听多个数据变化， watchEffect不需要传递内容，自动感知依赖
     watch数值可以拿到原始值和当前知， watchEffect不能获取原始值

   组合式函数：
      一直使用ref而不是 reactive， 推荐在组合式函数内始终返回一个包含多个ref的普通 非响应式的对象，这个该对象在组建中
      被解构为ref也能继续保持响应性。
      从组合式函数返回一个响应式对象会导致在在对象的结构过程中丢失与组合式函数内状态的响应性格链接，而ref可以一直维持这一响应性链接。
      如果希望以对象属性形式返回状态， 可以将返回的对象用reactive包装一次
      const mouse = reactive(useMouse())
      // mouse.x 链接到了原来的 x ref
      console.log(mouse.x)

   reactive和ref的区别：
      reactive: 
        只支持引用类型（数组，对象）
        在template 和 script中使用无差别，直接访问属性值
        重新分配一个新对象会丢失响应式
               let state = reactive({ count: 0 })
               //这个赋值将导致state失去响应
               state = {count: 1}
               //解决是不要整个对象替换，对象属性一个个赋值
        将对象传入函数时，失去响应
        解构时会失去响应式，需要使用toRefs
           let state = reactive({ count: 0 })
            //普通解构count 和 state.count 失去了响应性连接
            let { count } = state 
            count++ // state.count值依旧是0
            //使用toRefs解构,后的属性为ref的响应式变量
            let { count } = toRefs(state)
            count.value++ // state.count值改变为1
      ref：
         支持基础类型和 引用类型
         使用时需要是.value
         重新分配一个新对象不会失去响应式
         传入函数时，不会失去响应
         解构对象时会丢失响应性,需使用toRefs

   重新赋值对象refs不会失去响应式原因：
      ref定义数据时，返回的对象是一个包装过的简单值，而不是原始的引用，reactive定义鼠疫返回的是原始对象的引用
      
     

   


