js操纵真实dom的代价： 如果再一次操作中，需要更新10个dom'节点， 浏览器收到第一个dom请求后并不知道还有9次更新， 因此会马上执行流程。最终执行十次。
  但如果第一次计算完，下一次dom操作中有对这个节点做了改变， 前一次计算做了无用功， 白白浪费性能， 而且操纵一次dom代价是昂贵的。 
   频繁操作dom占用js性能，页面卡顿。

虚拟dom比真实dom块的原因：
   减少dom操作， 
      虚拟dom可以将多次操作合并成一次操作， 
    跨平台：
       虚拟dom不仅可以变成dom，还可以变成小程序， ios应用等，因为虚拟dom本质上是一个js对象
    事实上及一个操作，直接操作dom最快
  虚拟dom缺点：
      需要额外创建函数， 需要存储虚拟dom树

virtual-dom：
   用js对象结构表示dom树结构，然后用这个树构建一个真正的dom树
   当状态更新的时候， 重新构建一颗新的对象树， 然后用新的和旧的树对比（diff）， 记录两棵树的差异，返回patch对象
   将记录的差异patch解析应用到真实的dom树上试图更新
     
    属性
       tagName： 表示元素的标签名
       props：元素包含的属性
       children：元素的孩子数组

  优势：
     虚拟就是为了解决浏览器性能问题被设计出来的， 
     一个真实映射dom的js对象，
     假设有十次dom操作， 虚拟dom不会立即执行dom，而是将10次dom更新的内容保存在本地的一个js对象，
      最终将这个js一次性修改到dom树上， 避免了大量无畏的计算量， 用js模拟dom节点的好处是页面的更新先全部反映在js对象（虚拟dom）上
      操作内存中的js对象速度显然更快， 等更新结束， 再将最终的js对象映射到真实的dom，交给浏览器处理。

    算法实现：
        1）element ： js模拟dom 类似createElement（component， prop， children）
          ）渲染js便是的dom对象 render函数，最后document.body.appendChild(root) 

        2）diff：  比较两个虚拟dom：
            diff算法用来比较两个虚拟dom差异，在用diff比较子节点
        3）patch： patch的目的就是修改dom节点： 视图渲染， patch不是暴力替换，而是在现有的dom上修改来达到渲染的目的；
             对现有DOM修改需要做三件事：

                创建新增的节点
                删除已经废除的节点
                修改需要更新的节点
          
         创建节点：
             只有一下三种类型会被插入到dom中：
               元素节点：
               注释节点： 唯一标识isComment
               文本节点  
          更新节点：
              静态节点： 如果是静态节点就不操作，直接跳过
              新虚拟节点有文本属性：
                 当新虚拟文本有文本属性且和旧虚拟文本不一样， 可以直接把视图中真实的dom节点内容改成虚拟节点的文本
              新虚拟节点没有文本属性：
                如果先创建的虚拟节点没有文本属性， 那么就是一个元素节点， 元素节点可能有子节点， children属性，
                    1.新dom有children的情况：
                        如果  旧虚拟节点有children属性， 新旧两个虚拟节点进行详细对比
                          旧虚拟节点没有children属性，   把新虚拟节点中的children挨个创建成真实的dom插入到视图
                    2.新dom没有children
                      当新创建的虚拟节点既没有文本也没有children属性， 说明是一个空节点， 那么就旧dom有节点删节点，有文本删文本， 最后让视图为空标签

              更新子节点： 子节点diff
                 主要包括 更新节点， 删除节点， 新增节点， 移动节点

                 子节点的比较实质上就是循环进行头尾节点比较。循环结束的标志就是：旧子节点数组或新子节点数组遍历完，（即 oldStartIdx > oldEndIdx || newStartIdx > newEndIdx）。大概看一下循环流程：

                第一步 头头比较。若相似，旧头新头指针后移（即 oldStartIdx++ && newStartIdx++），真实dom不变，进入下一次循环；不相似，进入第二步。
                第二步 尾尾比较。若相似，旧尾新尾指针前移（即 oldEndIdx-- && newEndIdx--），真实dom不变，进入下一次循环；不相似，进入第三步。
                第三步 头尾比较。若相似，旧头指针后移，新尾指针前移（即 oldStartIdx++ && newEndIdx--），未确认dom序列中的头移到尾，进入下一次循环；不相似，进入第四步。
                第四步 尾头比较。若相似，旧尾指针前移，新头指针后移（即 oldEndIdx-- &&newStartIdx++），未确认dom序列中的尾移到头，进入下一次循环；不相似，进入第五步。
                第五步 若节点有key且在旧子节点数组中找到sameVnode（tag和key都一致），则将其dom移动到当前真实dom序列的头部，新头指针后移（即 newStartIdx++）；否则，vnode对应的dom（vnode[newStartIdx].elm）插入当前真实dom序列的头部，新头指针后移（即newStartIdx++）。


             在 vnode 不带 key 的情况下，每一轮的 diff 过程当中都是起始和结束节点进行比较，直到 oldCh 或者newCh 被遍历完。而当为 vnode 引入 key 属性后，
             在每一轮的 diff 过程中，当起始和结束节点都没有找到sameVnode 时，然后再判断在 newStartVnode 的属性中是否有 key，
              且是否在 oldKeyToIndx 中找到对应的节点 ：

              如果不存在这个 key，那么就将这个 newStartVnode 作为新的节点创建且插入到原有的 root 的子节点中；
              如果存在这个 key，那么就取出 oldCh 中的存在这个 key 的 vnode，然后再进行 diff 的过；
              给vdom上添加 key 属性后，遍历 diff 的过程中，当起始点，结束点的搜寻及 diff 出现还是无法匹配的情况下时，
              就会用 key 来作为唯一标识，来进行 diff，这样就可以提高 diff 效率。
       
         
    
    