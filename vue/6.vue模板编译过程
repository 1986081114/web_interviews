模板 -》 ast -> render函数- > 虚拟dom -> 真实dom

vue模板通过compiler编译成语法抽象树，然后将ast编译成对对应render函数， render函数然后生成虚拟dom节点 最后生成真实dom


1. runtime-compiler
template → ast → render函数 → virtual DOM → 真实DOM
（template → ast → render函数）由vue-template-compiler实现。
2. runtime-only （性能更高，打包后的代码量更少）
render函数 → virtual DOM → 真实DOM

编译原理：
首先解析模版，生成AST语法树(一种用JavaScript对象的形式来描述整个模板)。 使用大量的正则表达式对模板进行解析，
遇到标签、文本的时候都会执行对应的钩子进行相关处理。
Vue的数据是响应式的，但其实模板中并不是所有的数据都是响应式的。有一些数据首次渲染后就不会再变化，对应的DOM也不会变化。
那么优化过程就是深度遍历AST树，按照相关条件对树节点进行标记。这些被标记的节点(静态节点)我们就可以跳过对它们的比对，
对运行时的模板起到很大的优化作用。编译的最后一步是将优化后的AST树转换为可执行的代码。


1.new vue，
首先执行 vue的构造函数，  在调用vue的构造函数就会执行this._init(options)，options 包括el和data，methods等
在init函数中执行一系列， 初始化， 初始化生命周期， 初始化事件， 初始化数据等。这里还有一个比较重要的就是执行initState时
如果options.data存在会执行initData（vm），对data处理，就是proxy函数，proxy原理就是使用Object.defineProperty()函数在实例对象vm上定义与data里同名的属性
当我们访问vm[key] 就会通过get方法去访问vm[sourceKey][key] 即vm._data[key]。也就是说vm.message 就会去访问vm._data.message也就是vm.data.message。
所以 this.message就是this._data.message，

2.$mount 对el处理
  如果传入了el就执行挂在函数$mount,如果el是字符串就通过documment.query Selector(el)查找dom元素， 没有找到就document.createElement('div‘)创建一个div
  最终都是用dom元素挂载实例， 值得注意是实例不能挂载在body。html根节点上， 原因是vue在挂载是会将对应的dom对象替换成新的div，但body和html是不适合替换的。
   如果el是body或者html就会抛出警告，这也就是为什么平时我们通常会用“#app“或者“div“挂载实例的原因。
   在mount最终会执行mountComponent方法完成数据的渲染， 二mounteComponent完成挂载点必要条件就是提供渲染函数，在这个函数里面有两个重要的过程
    第一个就是运行updataComponent函数，updatecomponent里面运行vm.render函数
    第二个就是把updatacomponent函数传给Watcher创建watcher实例， 那么updatacomponent函数读取的数据都被watcher监听

3.render函数生成 
    vue内部定义的render方法来源有两种， 一种是用户手写的render方法， 那么vue会调用用户自己手写的render方法， 另一种是没有手写， vue会把template编译成render方法
      之前在上面也说了mounteComponent运行的条件是提供渲染函数，手写就直接运行，没有就生成render函数
    生成过程：
      1）模板内容提取：
        如果传入template并且是字符串以#开头，找到对应的dom元素，获取内容，保存在template变量中
        如果传入的template时dom节点， 也是获取innerHtml内容存入到template变量中，
        如果没有template，但是有el，获取el内容到template变量
      2）模板编译成render，使用compileToFunction函数将模板编译成render函数
        compilerToFunction分为三个过程： 
          2.1） 解析模板字符串生成AST：
               parse（）函数会用正则等方式解析temlate模板的指令， class，style等形成ast树。
         2.2）优化ast树，
           optimize（）， vue是数据响应的，但是template并不是所有数据都是响应的， 有很多数据渲染后不会改变， 这样可以做个标记， 为了后面diff算法跳过静态节点，优化性能
        2.3）codegen（）将优化后的ast树转成可执行的代码。 就可以得到render函数了

4.render到vnode生成：
   调用render.call（）函数返回虚拟节点，这里主要使用createElement（上下文环境， 标签，vnode数据， 子节点）方法

5.vm.update函数作用是把render生成的虚拟节点渲染成真正的dom
 update在两种情况下调用， 一是newVue初始化， 还有一种情况就是data数据发生改变。
 update最终会调用patch方法，这也是整个 virtual-dom 当中最为核心的方法，主要完成了prevVnode 和 vnode 的 diff 过程并根据需要操作的 vdom 节点打 patch，
 最后生成新的真实 dom 节点并完成视图的更新工作，在 patch 方法中，我们看到会分为两种情况，一种是当 oldVnode 不存在时，会创建新的节点；
 另一种则是已经存在 oldVnode ，那么会对 oldVnode 和 vnode 进行 diff 及 patch 的过程。

 5.1 判断旧节点是否存在，如果不存在就调用 createElm() 创建一个新的 dom 节点，否则进入第二步判断。

5.2通过 sameVnode() 判断新旧节点是否是同一节点，如果是同一个节点则调用 patchVnode() 直接修改现有的节点，否则进入第三步判断
5.3如果新旧节点不是同一节点，则调用 createElm()创建新的dom，并更新父节点的占位符，同时移除旧节点。
在createElm()函数中，主要完成的功能是将构建dom子节点插入到父节点中，并且一直循环到该节点没有子节点为止。这个过程createElm()函数和createChildren函数一起完成。
createChildren函数


        
  

   



