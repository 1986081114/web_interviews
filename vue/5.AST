AST:
  抽象语法树，是源代码的抽象语法结构的树状表现形式。树上的每个节点表示源代码中的一种结构
   
  作用：
     编译器错误提示，代码格式化
     elint对代码错误检查
     webpakc通过babel转译js语法
解析过程：
    1.分词：也叫词法分析
       将整个的代码字符串分割成一个个token， 所谓的token在js指的是语法上不能再分的，最小的单个字符或字符串
    2.解析： 语法分析
        将上一步生成的token数据， 根据语法规则转为ast， 如果源码符合语法规则，顺利完成， 如果源码存在语法错误， 这一步终止， 并抛出错误。
        生成树的时候，解析器会删除一些没必要的标识tokens（比如不完整的括号），因此AST不是100%与源码匹配的，但是已经能让我们知道如何处理了。
        说个题外话，解析器100%覆盖所有代码结构生成树叫做CST（具体语法树）