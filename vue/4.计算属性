计算属性：

computed:{
				 // fullName: function(){
				 // 			return this.firstname + ' ' + this.lastname
				 // },
				 //计算属性一般没有set方法只读属性
				 fullName:{
					 
					 set: function (newValue) {
						 console.log('-------------', newValue);
						 const name = newValue.split(' ');
						 this.firstname = name[0];
						 this.lastname = name[1];
				
					 },
					 get: function () {
						 console.log('-------------');
						 return this.firstname + ' ' + this.lastname
						  }
					},

 计算属性本质就是直接实现一个getter方法，是一个属性不是函数
 computed和methods： 
   vue中method就是一个函数域，定义方法进行属性数据修改，
   计算属性
   computed是一个属性，而methods是一个方法，使用需要加括号。
   computed是有缓存的当数据未改变，从缓存拿，只运行一次，而methods每次都会运算

 计算属性和watched：
  computed是计算属性， 依赖于其他属性值， 并且computed的值有缓存， 只有他依赖的属性值发生改变， 
   下一次获取computed值才会重新计算，不支持异步操作
  watch没有缓存， 更多的是观察作用， 类似于某些数据的监听回调，当数据变化执行回调进行后续操作 
    在回调中传入newvla， oldval两个参数。支持异步操作
  相同点：他们两者都可以观察页面数据变化的。
  computed 是计算一个新的属性，并将该属性挂载到 vm（Vue 实例）上，
    而 watch 是监听已经存在且已挂载到 vm 上的数据，所以用 watch 同样可以监听 computed 计算属性的变化（其它还有 data、props）
   从使用场景上说，computed 适用一个数据被多个数据影响，而 watch 适用一个数据影响多个数据；

computed实现原理：
  watcher有一类是computed watcher，计算属性的监听器，
  computed watcher持有一个dep实例， 通过dirty属性标记计算属性是否需要重新传值，
  当computed依赖改变后， 就会通知订阅的watcher进行更新，对于computed watcher会将dirty设置为true，并进行计算属性方法的调用。


computed所谓的缓存是指什么？
 计算属性是基于他的响应式依赖进行缓存的， 只有发生改变的时候才会重新求值，

 computed缓存的意义是什么？ 经常在什么时候使用？
  一般使用计算属性是进行一些数据的类型转换， 但是当计算属性内部的操作非常耗时，遍历一个极大的数组，就可以利用缓存，避免第二次耗时，
  例如遍历一个大数组，查找某个值， 或者当if for一起在使用的时候，可以利用计算属性先筛选符合if条件的数据。

  以下代码能实时更新吗？
     computed: {
		 storageMsg: function(){
			 return sessionStorage.getItem("xxx")
		 },
		 newTime: function() {
			 return Date.now()
		 }
	 }
	 onclick(){
		 sessionStorage.setItem('xxx'),111
	 }

	 无论怎么改变sessionStorage ，在计算属性中得到的值都不会改变，因为这些数据不能响应反映到页面上，
	 只有在vue初始化被监听的数据，才能被vue监听到，响应式反应。

	 watche:
	    默认引用类型拿不到旧的值,他是浅监听需要使用函数和deep
		  data(){
			  return {
				  name: 'computed',
				  info:{
					  city: 56
				  }
			  }
		  }

		  watch:{
                 name(old, val) {

				 },
				 info:{
					 hadler(oldval, val){
                         // 此处注意，handler函数不能为箭头函数，this会取上下文，而不是组件里的this,此外，深度监听，必须为handler函数名，否则会无效果
					 }
					 deep:true
				 }

		  }

  
       
   