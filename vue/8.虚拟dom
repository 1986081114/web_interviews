js操纵真实dom的代价： 如果再一次操作中，需要更新10个dom'节点， 浏览器收到第一个dom请求后并不知道还有9次更新， 因此会马上执行流程。最终执行十次。
  但如果第一次计算完，下一次dom操作中有对这个节点做了改变， 前一次计算做了无用功， 白白浪费性能， 而且操纵一次dom代价是昂贵的。 
   频繁操作dom占用js性能，页面卡顿。

虚拟dom比真实dom块的原因：
   减少dom操作， 
      虚拟dom可以将多次操作合并成一次操作， 
    跨平台：
       虚拟dom不仅可以变成dom，还可以变成小程序， ios应用等，因为虚拟dom本质上是一个js对象
         事实上及一个操作，直接操作dom最快
    打开了函数式UI的大门，即UI = f（data）这种构建ui的方式
  虚拟dom缺点：
      需要额外创建函数， 需要存储虚拟dom树


virtual-dom：
   用js对象结构表示dom树结构，然后用这个树构建一个真正的dom树
   当状态更新的时候， 重新构建一颗新的对象树， 然后用新的和旧的树对比（diff）， 记录两棵树的差异，返回patch对象
   将记录的差异patch解析应用到真实的dom树上试图更新
     
    属性
       tagName： 表示元素的标签名 div
       props：元素包含的属性 classname，： div： 
       children：元素的孩子数组 children:[{}]

diff：
   值比较同一层级
   tag不同直接删除，不在深度比较
   如果key和tag相同，认为是相同节点，不在深度比较

  优势：
     虚拟就是为了解决浏览器性能问题被设计出来的， 
     一个真实映射dom的js对象，
     假设有十次dom操作， 虚拟dom不会立即执行dom，而是将10次dom更新的内容保存在本地的一个js对象，
      最终将这个js一次性修改到dom树上， 避免了大量无畏的计算量， 用js模拟dom节点的好处是页面的更新先全部反映在js对象（虚拟dom）上
      操作内存中的js对象速度显然更快， 等更新结束， 再将最终的js对象映射到真实的dom，交给浏览器处理。

    算法实现：

        1）vue里面通过h函数返回vnode对象包含（元素标签名， 属性，  children|| text， 对应的element， key）和newVnode

function patch(oldVnode, vnode, parentElm) {
    if (!oldVnode) {
        /* 当旧节点不存在，直接批量插入新节点树 */
        addVnodes(parentElm, null, vnode, 0, vnode.length - 1);
    } else if (!vnode) {
        /* 当新节点不存在，直接批量删除旧节点树 */
        removeVnodes(parentElm, oldVnode, 0, oldVnode.length - 1);
    } else {
        if (sameVnode(oldVNode, vnode)) {
            /* 当新旧节点相同，进行 patchVNode 操作，对比两个 node 节点 */
            patchVnode(oldVNode, vnode);
        } else {
            /* 否则两个不同直接删除旧节点，插入新节点 */
            removeVnodes(parentElm, oldVnode, 0, oldVnode.length - 1);
            addVnodes(parentElm, null, vnode, 0, vnode.length - 1);
        }
    }
}
        2）：判断如果第一个vnode不存在，创建一个新的vnode关联dom
             静态节点： 如果是静态节点就不操作，直接跳过
        3）sameVnode判断 是否相等：
               如果新旧标签不一致 用新的替换旧的
               key和tag都相同，是相等的，如果都没传就是undefined == undefined = true
                    执行patchvNode函数
        4） patchVnode函数  
             if 新虚拟节点有文本属性：
                 当新虚拟文本有文本属性且和旧虚拟文本不一样， 可以直接把视图中真实的dom节点内容改成虚拟节点的文本
              else新虚拟节点没有文本属性：
                    判断children
                    1.新dom有children的情况：
                        如果  旧虚拟节点有children属性， 新旧两个虚拟节点进行详细对比执行updateChildren
                          旧虚拟节点没有children属性，   把新虚拟节点中的children挨个创建成真实的dom插入到视图
                    2.新dom没有children
                      当新创建的虚拟节点既没有文本也没有children属性， 说明是一个空节点， 那么就旧dom有节点删节点，有文本删文本， 最后让视图为空标签
        5）updateChildren

                diff算法核心 采用双指针的方式 对比新老vnode的儿子节点
                用 isSameVnode 来判断新老子节点的头头 尾尾 头尾 尾头 是否是同一节点 如果满足就进行相应的移动指针(头头 尾尾)或者移动 
                   dom 节点(头尾 尾头)操作

              while  子节点的比较实质上就是循环进行头尾节点比较。循环结束的标志就是：旧子节点数组或新子节点数组遍历完，
               （即 oldStartIdx > oldEndIdx || newStartIdx > newEndIdx）。大概看一下循环流程：

             {if    第一步 头头比较。若相似，根据这两个vnode执行patchVnode，旧头新头指针后移（即 oldStartIdx++ && newStartIdx++）不相似，进入第二步。
               if else 第二步 尾尾比较。若相似，执行patchVnode，旧尾新尾指针前移（即 oldEndIdx-- && newEndIdx--），不相似，进入第三步。
                if else 第三步 头尾比较。若相似，执行patchVnode，旧头指针后移，新尾指针前移（即 oldStartIdx++ && newEndIdx--），不相似，进入第四步。
                if else 第四步 尾头比较。若相似，执行patchVnode，旧尾指针前移，新头指针后移（即 oldEndIdx-- &&newStartIdx++），不相似，进入第五步。

                else 如果四种匹配没有一对是成功的，拿新节点的key，能否对应上老节点的key
                分为两种情况

                 如果新旧子节点都存在key，那么会根据oldChild的key生成一张hash表，用S的key与hash表做匹配，
                 匹配成功就判断S和匹配节点是否为sameNode，
                 如果是，继续做patchvnode，然后就在真实dom中将成功的节点移到最前面，否则，将S生成对应的节点插入到dom中对应的oldS位置，
                 S指针向中间移动，被匹配old中的节点置为null。

                  如果没有key,则直接将S生成新的节点插入真实DOM（ps：这下可以解释为什么v-for的时候需要设置key了，
                  如果没有key那么就只会做四种匹配，就算指针中间有可复用的节点都不能被复用了）

             }
         在指针相遇以后，还有两种比较特殊的情况：
         有新节点需要加入。
         如果更新完以后，oldStartIdx > oldEndIdx，说明旧节点都被 patch 完了，但是有可能还有新的节点没有被处理到。接着会去判断是否要新增子节点

         有旧节点需要删除。
         如果新节点先patch完了，那么此时会走 newStartIdx > newEndIdx  的逻辑，那么就会去删除多余的旧子节点。



             在 vnode 不带 key 的情况下，每一轮的 diff 过程当中都是起始和结束节点进行比较，直到 oldCh 或者newCh 被遍历完。
             而当为 vnode 引入 key 属性后，
             在每一轮的 diff 过程中，当起始和结束节点都没有找到sameVnode 时，然后再判断在 newStartVnode 的属性中是否有 key，
              且是否在 oldKeyToIndx 中找到对应的节点 ：

              如果不存在这个 key，那么就将这个 newStartVnode 作为新的节点创建且插入到原有的 root 的子节点中；
              如果存在这个 key，那么就取出 oldCh 中的存在这个 key 的 vnode，然后再进行 diff 的过；
              给vdom上添加 key 属性后，遍历 diff 的过程中，当起始点，结束点的搜寻及 diff 出现还是无法匹配的情况下时，
              就会用 key 来作为唯一标识，来进行 diff，这样就可以提高 diff 效率。
       
         
    
    