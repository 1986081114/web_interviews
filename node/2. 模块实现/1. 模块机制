CommonJS 规范是为了解决 JavaScript 的作用域问题而定义的模块形式，可以使每个模块它自身的命名空间中执行。
该规范的主要内容是，模块必须通过 module.exports 导出对外的变量或接口，
通过 require() 来导入其他模块的输出到当前模块作用域中。

1. commonJS 的模块规范
  模块引用： 使用require()方法接收模块标识，
  模块定义：模块中使用export对象用于导出当前模块的方法或者变量，并且是唯一的接口，module对象是模块自身。export是module的属性
  模块标识： 就是传递给requir方法的参数，必须符合小驼峰命名的字符串，或者以 . 开头的绝对路径，

node引入模块 需要进过三个步骤， 路径分析-》 文件定位-》编译执行
node中模块分为：
   核心模块： node提供的模块，核心模块在node源码编译的过程中，编译进了二进制执行文件，在node启动时，核心模块就直接被加载到内存
            所以核心模块被引入时，文件定位和编译可以省略，在路径分析优先级最高，加载速度最快的
   文件模块： 用户编写的 没在运行时动态加载，需要完成的路径分析，文件定位，编译执行过程，速度较慢。

js模块的编译：
   每个模块中都包含着 require ， export ， module，和_filename, _dirname这五个变量，
   如果直接将定义模块过程中放在浏览器内会存在污染全局变量的情况。事实上，在编译的过程中，node对js文件进行了头尾包装，
   （function ( export, require, module，_filename, )_dirname) {\n 在尾部添加了\n}）
   这样每个模块文件之间进行了作用域隔离，包装后的代码通过runThisContext()执行返回一个具体的function对象
   再讲上述参数 作为参数传递给这个function，这也就是这样写变量没有定义但是却存在的原因，


require（x）:
      1.如果是核心模块 如 path http，在node源代码编译过程中，已经被编译了，直接请求并停止查找，加载最快。
      2.路径形式的文件模块：如果X是以./ / ../ 开头，会被当为文件模块来处理，require会将该路径转为真实路径，并以真实
        路径为索引，编译后的结果放在缓存内，二次加载更快，给了确切的路径，加载更快，速度第二
      3.如果x不是路径也不是核心模块是自定义模块，是最费时的，在加载过程中逐个尝试模块路径中的路径，知道找到文件为止
         也就是 去node module下查找， 从内往外，文件越深，加载越慢，
         模块路径的生成规则就是 当前目录下的node)module , 父目录下的node_module... 直到根目录下的node_modules
  模块加载过程：
     1.模块只有在第一次被引用时， 模块中的js代码会被运行
     2.模块被多次引用，会缓存 最终只运行一次 
       每一个模块中都有一个属性 loaded，默认是false表示没有被加载过， true表示已经被加载过。
    3.如果是循环引用：
        形成一个闭环。相当于一个图，会从main开始深度优先遍历

缺点：
      commonjs加载是同步的，必须等对应模块加载完，才继续执行， 在服务器没什么问题，但不适合浏览器，会影响浏览器的运行
      在webpack中使用commonjs是因为webpack会把代码转成浏览器可执行的代码，相当于不是模块化了
