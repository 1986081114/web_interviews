回流（重排）： 布局或者几何属性更改成为节流
重绘：节点需要更改外观但是不影响布局，比如color、

回流一定会发生重绘，但重绘不一定引发回流， 每次创建界面都会发生至少一次回流
相较于重排操作，重绘省去了布局和分层阶段，直接绘制列表所以执行效率会比重排操作要高一些

display： none  回流，重绘；  visibility： hidden （重绘）

content-visibility: hidden 手动管理可见性 只是隐藏了子元素，自身不会被隐藏,隐藏内容的渲染状态会被缓存，所以当它被移除或者设为可见时，
                        浏览器不会重新渲染，而是会应用缓存，所以对于需要频繁切换显示隐藏的元素，这个属性能够极大地提高渲染性能。
content-visibility: auto 跳过渲染工作

当页面布局和几何属性改变时就需要回流。下述情况会发生浏览器回流：
0：页面初始化，这是最大一次开销的重排。
1、添加或者删除可见的DOM元素；
2、元素位置改变；
3、元素尺寸改变——边距、填充、边框、宽度和高度
4、内容改变——比如文本改变或者图片大小改变而引起的计算值宽度和高度改变；
5、激活伪类，（：hover）
6、浏览器窗口尺寸改变——resize事件发生时；
7：查询某些属性：offsetWidth， offsetHeight， clientwidth， scrollwidth等

减少 ：
   浏览器： flush队列； 浏览器会有一个flush队列，储存触发的重绘与节流，等达到一定数量进行批处理。


        1. 需要要对元素进行复杂的操作时，可以先隐藏(display:"none")，操作完成后再显示
        2. 需要创建多个DOM节点时，使用DocumentFragment创建完后一次性的加入document
        3. 提升成合成层：
            合成层的位图交于gpu合成， 更快速， 不会影响其他层， 对于transform， opacity不会触发layout和paint
            #target {
                 will-change: transform;
                }
        4. 尽量避免用table布局（table元素一旦触发回流就会导致table里所有的其它元素回流）
        5. 读写分离
        6. 复杂动画应用到position absolute fixed
        
我们使用了CSS的transform来实现动画效果，这可以避开重排和重绘阶段，直接在非主线程上执行合成动画操作。这样的效率是最高的，
因为是在非主线程上合成，并没有占用主线程的资源，另外也避开了布局和绘制两个子阶段，所以相对于重绘和重排，
合成能大大提升绘制效率。

gpu加速：
    还有一种情况直接合成， 刺入css的transfrom ， opacity， filter， 可以直接合成，也就是cpu加速

    直接跳过布局和绘制过程， 进入非主线程处理阶段， 交给合成线程，有两个好处：
        能够充分利用gpu优势，合成线程生成位图的过程中会调用线程池， 并在其中使用gpu进行加速，gpu最擅长的就是处理位图运算
        没有占用主线程资源，即使主线程卡住了， 效果依旧能流畅显示

