scheduler与react是两套优先级机制， 在react存在多种不同的优先级的情况，
 react涉及lane模型满足：
   代表优先级的不同
   可能同时存在几个同优先级的更新， 还要表示批的概念
   方便优先级相关计算
表示优先级的不同：
    lane借鉴赛道概念使用31位的二进制表示31条赛道， 位数越小的赛道优先级越高。某些相邻的赛道拥有相同的优先级。
    同步优先级依旧最高
表示批的概念：
    在定义lane优先级变量时，同时定义了lanes，lanes表示优先级范围，这个范围内的赛道属于同一批。
    优先级越低lanes占用的位数越多， 因为优先级越低更新越容易被打断，导致挤压下来，所以需要更多的位。
优先级运算：
  lane对应的是二进制文件，所以优先级相关运算就是位运算。

Lane模型中task是怎么获取优先级的（赛车的初始赛道）:
    在findUpdateLane中执行， 在高优先级lanes开始， 如果没有可用的lane，就降低优先级区低优先级的lanes寻找

高优先级怎么插队：
  ​	在Lane模型中如果一个低优先级的任务执行，并且还在调度的时候触发了一个高优先级的任务，则高优先级的任务打断低优先级任务，此时应该先取消低优先级的任务，因为此时低优先级的任务可能已经进行了一段时间，Fiber树已经构建了一部分，所以需要将Fiber树还原，这个过程发生在函数prepareFreshStack中，在这个函数中会初始化已经构建的Fiber树
  
饥饿问题：
  低优先级任务始终被高优先级任务打断，无法执行
