可以不写class组建的情况下， 使用state和react


class的缺点：
      在复杂组件中，耦合的逻辑代码很难分离
         组件化讲究的是分离逻辑与 UI，但是对于平常所写的业务代码，较难做到分离和组合。尤其是在生命周期钩子中，
            多个不相关的业务代码被迫放在一个生命周期钩子中，需要把相互关联的部分拆封更小的函数。

      监听清理和资源释放问题
        当组件要销毁时，很多情况下都需要清除注册的监听事件、释放申请的资源。
        事件监听、资源申请需要在 Mount 钩子中申请，当组件销毁时还必须在 Unmount 勾子中进行清理，这样写使得同一资源的生成和销毁逻辑不在一起，
        因为生命周期被迫划分成两个部分。

      组件间逻辑复用困难
        在 React 中实现逻辑复用是比较困难的。虽然有例如 render props、高阶组件等方案，但仍然需要重新组织组件结构，不算真正意义上的复用。
        抽象复用一个复杂组件更是不小的挑战，大量抽象层代码带来的嵌套地狱会给开发者带来巨大的维护成本。

      class 学习成本
          与 Vue 的易于上手不同，开发 React 的类组件需要比较扎实的 JavaScript 基础，尤其是关于 this 、闭包、
          绑定事件处理器等相关概念的理解。


 hook优点：
    1.有利于业务逻辑的封装和拆分， 可以非常自由的组合各种hooks
    2.定时器，监听器可以在聚合在同一个代码下


hooks的注意事项：
   只能在函数内部的最外层使用hook，不能再循环，条件判断或者子函数调用
   只能在react的函数组件内部调用hook，奴被包裹在其他js'函数里调用

为什么不能在条件判断内使用？
   因为hook底层为了实现多个状态， 使用了链表， 那么他们的位置先后关键很重要，
   如果某次条件判断错开了一个状态，会导致索引对应的状态产生偏移

   